import{S as it,i as ot,s as st,a as lt,e as L,c as ct,b as G,g as W,t as A,d as Y,f as S,h as q,j as ft,o as Oe,k as ut,l as dt,m as pt,n as ke,p as X,q as _t,r as mt,u as ht,v as F,w as M,x as te,y as H,z as B,A as _e}from"./chunks/index-3b672fbb.js";import{S as tt,I as z,g as ze,f as We,a as Re,b as me,s as Q,i as Ye,c as oe,P as Xe,d as gt,e as wt,h as yt}from"./chunks/singletons-fb12cd40.js";import{_ as T}from"./chunks/preload-helper-41c905a7.js";function vt(i,e){return i==="/"||e==="ignore"?i:e==="never"?i.endsWith("/")?i.slice(0,-1):i:e==="always"&&!i.endsWith("/")?i+"/":i}function bt(i){return i.split("%25").map(decodeURI).join("%25")}function Et(i){for(const e in i)i[e]=decodeURIComponent(i[e]);return i}const $t=["href","pathname","search","searchParams","toString","toJSON"];function kt(i,e){const n=new URL(i);for(const r of $t){let a=n[r];Object.defineProperty(n,r,{get(){return e(),a},enumerable:!0,configurable:!0})}return Rt(n),n}function Rt(i){Object.defineProperty(i,"hash",{get(){throw new Error("Cannot access event.url.hash. Consider using `$page.url.hash` inside a component instead")}})}const It="/__data.json";function Lt(i){return i.replace(/\/$/,"")+It}function At(...i){let e=5381;for(const n of i)if(typeof n=="string"){let r=n.length;for(;r;)e=e*33^n.charCodeAt(--r)}else if(ArrayBuffer.isView(n)){const r=new Uint8Array(n.buffer,n.byteOffset,n.byteLength);let a=r.length;for(;a;)e=e*33^r[--a]}else throw new TypeError("value must be a string or TypedArray");return(e>>>0).toString(36)}const he=window.fetch;window.fetch=(i,e)=>((i instanceof Request?i.method:(e==null?void 0:e.method)||"GET")!=="GET"&&se.delete(De(i)),he(i,e));const se=new Map;function St(i,e){const n=De(i,e),r=document.querySelector(n);if(r!=null&&r.textContent){const{body:a,...p}=JSON.parse(r.textContent),t=r.getAttribute("data-ttl");return t&&se.set(n,{body:a,init:p,ttl:1e3*Number(t)}),Promise.resolve(new Response(a,p))}return he(i,e)}function Ot(i,e,n){if(se.size>0){const r=De(i,n),a=se.get(r);if(a){if(performance.now()<a.ttl&&["default","force-cache","only-if-cached",void 0].includes(n==null?void 0:n.cache))return new Response(a.body,a.init);se.delete(r)}}return he(e,n)}function De(i,e){let r=`script[data-sveltekit-fetched][data-url=${JSON.stringify(i instanceof Request?i.url:i)}]`;if(e!=null&&e.headers||e!=null&&e.body){const a=[];e.headers&&a.push([...new Headers(e.headers)].join(",")),e.body&&(typeof e.body=="string"||ArrayBuffer.isView(e.body))&&a.push(e.body),r+=`[data-hash="${At(...a)}"]`}return r}const Pt=/^(\[)?(\.\.\.)?(\w+)(?:=(\w+))?(\])?$/;function Tt(i){const e=[];return{pattern:i==="/"?/^\/$/:new RegExp(`^${Nt(i).map(r=>{const a=/^\[\.\.\.(\w+)(?:=(\w+))?\]$/.exec(r);if(a)return e.push({name:a[1],matcher:a[2],optional:!1,rest:!0,chained:!0}),"(?:/(.*))?";const p=/^\[\[(\w+)(?:=(\w+))?\]\]$/.exec(r);if(p)return e.push({name:p[1],matcher:p[2],optional:!0,rest:!1,chained:!0}),"(?:/([^/]+))?";if(!r)return;const t=r.split(/\[(.+?)\](?!\])/);return"/"+t.map((l,d)=>{if(d%2){if(l.startsWith("x+"))return Ie(String.fromCharCode(parseInt(l.slice(2),16)));if(l.startsWith("u+"))return Ie(String.fromCharCode(...l.slice(2).split("-").map(O=>parseInt(O,16))));const w=Pt.exec(l);if(!w)throw new Error(`Invalid param: ${l}. Params and matcher names can only have underscores and alphanumeric characters.`);const[,v,U,j,$]=w;return e.push({name:j,matcher:$,optional:!!v,rest:!!U,chained:U?d===1&&t[0]==="":!1}),U?"(.*?)":v?"([^/]*)?":"([^/]+?)"}return Ie(l)}).join("")}).join("")}/?$`),params:e}}function Dt(i){return!/^\([^)]+\)$/.test(i)}function Nt(i){return i.slice(1).split("/").filter(Dt)}function Ut(i,e,n){const r={},a=i.slice(1);let p=0;for(let t=0;t<e.length;t+=1){const c=e[t],l=a[t-p];if(c.chained&&c.rest&&p){r[c.name]=a.slice(t-p,t+1).filter(d=>d).join("/"),p=0;continue}if(l===void 0){c.rest&&(r[c.name]="");continue}if(!c.matcher||n[c.matcher](l)){r[c.name]=l;continue}if(c.optional&&c.chained){p++;continue}return}if(!p)return r}function Ie(i){return i.normalize().replace(/[[\]]/g,"\\$&").replace(/%/g,"%25").replace(/\//g,"%2[Ff]").replace(/\?/g,"%3[Ff]").replace(/#/g,"%23").replace(/[.*+?^${}()|\\]/g,"\\$&")}function Vt(i,e,n,r){const a=new Set(e);return Object.entries(n).map(([c,[l,d,w]])=>{const{pattern:v,params:U}=Tt(c),j={id:c,exec:$=>{const O=v.exec($);if(O)return Ut(O,U,r)},errors:[1,...w||[]].map($=>i[$]),layouts:[0,...d||[]].map(t),leaf:p(l)};return j.errors.length=j.layouts.length=Math.max(j.errors.length,j.layouts.length),j});function p(c){const l=c<0;return l&&(c=~c),[l,i[c]]}function t(c){return c===void 0?c:[a.has(c),i[c]]}}function jt(i){let e,n,r;var a=i[0][0];function p(t){return{props:{data:t[2],form:t[1]}}}return a&&(e=F(a,p(i))),{c(){e&&M(e.$$.fragment),n=L()},l(t){e&&te(e.$$.fragment,t),n=L()},m(t,c){e&&H(e,t,c),G(t,n,c),r=!0},p(t,c){const l={};if(c&4&&(l.data=t[2]),c&2&&(l.form=t[1]),a!==(a=t[0][0])){if(e){W();const d=e;A(d.$$.fragment,1,0,()=>{B(d,1)}),Y()}a?(e=F(a,p(t)),M(e.$$.fragment),S(e.$$.fragment,1),H(e,n.parentNode,n)):e=null}else a&&e.$set(l)},i(t){r||(e&&S(e.$$.fragment,t),r=!0)},o(t){e&&A(e.$$.fragment,t),r=!1},d(t){t&&q(n),e&&B(e,t)}}}function Ct(i){let e,n,r;var a=i[0][0];function p(t){return{props:{data:t[2],$$slots:{default:[Jt]},$$scope:{ctx:t}}}}return a&&(e=F(a,p(i))),{c(){e&&M(e.$$.fragment),n=L()},l(t){e&&te(e.$$.fragment,t),n=L()},m(t,c){e&&H(e,t,c),G(t,n,c),r=!0},p(t,c){const l={};if(c&4&&(l.data=t[2]),c&2107&&(l.$$scope={dirty:c,ctx:t}),a!==(a=t[0][0])){if(e){W();const d=e;A(d.$$.fragment,1,0,()=>{B(d,1)}),Y()}a?(e=F(a,p(t)),M(e.$$.fragment),S(e.$$.fragment,1),H(e,n.parentNode,n)):e=null}else a&&e.$set(l)},i(t){r||(e&&S(e.$$.fragment,t),r=!0)},o(t){e&&A(e.$$.fragment,t),r=!1},d(t){t&&q(n),e&&B(e,t)}}}function qt(i){let e,n,r;var a=i[0][1];function p(t){return{props:{data:t[3],form:t[1]}}}return a&&(e=F(a,p(i))),{c(){e&&M(e.$$.fragment),n=L()},l(t){e&&te(e.$$.fragment,t),n=L()},m(t,c){e&&H(e,t,c),G(t,n,c),r=!0},p(t,c){const l={};if(c&8&&(l.data=t[3]),c&2&&(l.form=t[1]),a!==(a=t[0][1])){if(e){W();const d=e;A(d.$$.fragment,1,0,()=>{B(d,1)}),Y()}a?(e=F(a,p(t)),M(e.$$.fragment),S(e.$$.fragment,1),H(e,n.parentNode,n)):e=null}else a&&e.$set(l)},i(t){r||(e&&S(e.$$.fragment,t),r=!0)},o(t){e&&A(e.$$.fragment,t),r=!1},d(t){t&&q(n),e&&B(e,t)}}}function Ft(i){let e,n,r;var a=i[0][1];function p(t){return{props:{data:t[3],$$slots:{default:[Gt]},$$scope:{ctx:t}}}}return a&&(e=F(a,p(i))),{c(){e&&M(e.$$.fragment),n=L()},l(t){e&&te(e.$$.fragment,t),n=L()},m(t,c){e&&H(e,t,c),G(t,n,c),r=!0},p(t,c){const l={};if(c&8&&(l.data=t[3]),c&2099&&(l.$$scope={dirty:c,ctx:t}),a!==(a=t[0][1])){if(e){W();const d=e;A(d.$$.fragment,1,0,()=>{B(d,1)}),Y()}a?(e=F(a,p(t)),M(e.$$.fragment),S(e.$$.fragment,1),H(e,n.parentNode,n)):e=null}else a&&e.$set(l)},i(t){r||(e&&S(e.$$.fragment,t),r=!0)},o(t){e&&A(e.$$.fragment,t),r=!1},d(t){t&&q(n),e&&B(e,t)}}}function Mt(i){let e,n,r;var a=i[0][2];function p(t){return{props:{data:t[4],form:t[1]}}}return a&&(e=F(a,p(i))),{c(){e&&M(e.$$.fragment),n=L()},l(t){e&&te(e.$$.fragment,t),n=L()},m(t,c){e&&H(e,t,c),G(t,n,c),r=!0},p(t,c){const l={};if(c&16&&(l.data=t[4]),c&2&&(l.form=t[1]),a!==(a=t[0][2])){if(e){W();const d=e;A(d.$$.fragment,1,0,()=>{B(d,1)}),Y()}a?(e=F(a,p(t)),M(e.$$.fragment),S(e.$$.fragment,1),H(e,n.parentNode,n)):e=null}else a&&e.$set(l)},i(t){r||(e&&S(e.$$.fragment,t),r=!0)},o(t){e&&A(e.$$.fragment,t),r=!1},d(t){t&&q(n),e&&B(e,t)}}}function Ht(i){let e,n,r;var a=i[0][2];function p(t){return{props:{data:t[4],$$slots:{default:[Bt]},$$scope:{ctx:t}}}}return a&&(e=F(a,p(i))),{c(){e&&M(e.$$.fragment),n=L()},l(t){e&&te(e.$$.fragment,t),n=L()},m(t,c){e&&H(e,t,c),G(t,n,c),r=!0},p(t,c){const l={};if(c&16&&(l.data=t[4]),c&2083&&(l.$$scope={dirty:c,ctx:t}),a!==(a=t[0][2])){if(e){W();const d=e;A(d.$$.fragment,1,0,()=>{B(d,1)}),Y()}a?(e=F(a,p(t)),M(e.$$.fragment),S(e.$$.fragment,1),H(e,n.parentNode,n)):e=null}else a&&e.$set(l)},i(t){r||(e&&S(e.$$.fragment,t),r=!0)},o(t){e&&A(e.$$.fragment,t),r=!1},d(t){t&&q(n),e&&B(e,t)}}}function Bt(i){let e,n,r;var a=i[0][3];function p(t){return{props:{data:t[5],form:t[1]}}}return a&&(e=F(a,p(i))),{c(){e&&M(e.$$.fragment),n=L()},l(t){e&&te(e.$$.fragment,t),n=L()},m(t,c){e&&H(e,t,c),G(t,n,c),r=!0},p(t,c){const l={};if(c&32&&(l.data=t[5]),c&2&&(l.form=t[1]),a!==(a=t[0][3])){if(e){W();const d=e;A(d.$$.fragment,1,0,()=>{B(d,1)}),Y()}a?(e=F(a,p(t)),M(e.$$.fragment),S(e.$$.fragment,1),H(e,n.parentNode,n)):e=null}else a&&e.$set(l)},i(t){r||(e&&S(e.$$.fragment,t),r=!0)},o(t){e&&A(e.$$.fragment,t),r=!1},d(t){t&&q(n),e&&B(e,t)}}}function Gt(i){let e,n,r,a;const p=[Ht,Mt],t=[];function c(l,d){return l[0][3]?0:1}return e=c(i),n=t[e]=p[e](i),{c(){n.c(),r=L()},l(l){n.l(l),r=L()},m(l,d){t[e].m(l,d),G(l,r,d),a=!0},p(l,d){let w=e;e=c(l),e===w?t[e].p(l,d):(W(),A(t[w],1,1,()=>{t[w]=null}),Y(),n=t[e],n?n.p(l,d):(n=t[e]=p[e](l),n.c()),S(n,1),n.m(r.parentNode,r))},i(l){a||(S(n),a=!0)},o(l){A(n),a=!1},d(l){t[e].d(l),l&&q(r)}}}function Jt(i){let e,n,r,a;const p=[Ft,qt],t=[];function c(l,d){return l[0][2]?0:1}return e=c(i),n=t[e]=p[e](i),{c(){n.c(),r=L()},l(l){n.l(l),r=L()},m(l,d){t[e].m(l,d),G(l,r,d),a=!0},p(l,d){let w=e;e=c(l),e===w?t[e].p(l,d):(W(),A(t[w],1,1,()=>{t[w]=null}),Y(),n=t[e],n?n.p(l,d):(n=t[e]=p[e](l),n.c()),S(n,1),n.m(r.parentNode,r))},i(l){a||(S(n),a=!0)},o(l){A(n),a=!1},d(l){t[e].d(l),l&&q(r)}}}function Ze(i){let e,n=i[7]&&Qe(i);return{c(){e=ut("div"),n&&n.c(),this.h()},l(r){e=dt(r,"DIV",{id:!0,"aria-live":!0,"aria-atomic":!0,style:!0});var a=pt(e);n&&n.l(a),a.forEach(q),this.h()},h(){ke(e,"id","svelte-announcer"),ke(e,"aria-live","assertive"),ke(e,"aria-atomic","true"),X(e,"position","absolute"),X(e,"left","0"),X(e,"top","0"),X(e,"clip","rect(0 0 0 0)"),X(e,"clip-path","inset(50%)"),X(e,"overflow","hidden"),X(e,"white-space","nowrap"),X(e,"width","1px"),X(e,"height","1px")},m(r,a){G(r,e,a),n&&n.m(e,null)},p(r,a){r[7]?n?n.p(r,a):(n=Qe(r),n.c(),n.m(e,null)):n&&(n.d(1),n=null)},d(r){r&&q(e),n&&n.d()}}}function Qe(i){let e;return{c(){e=_t(i[8])},l(n){e=mt(n,i[8])},m(n,r){G(n,e,r)},p(n,r){r&256&&ht(e,n[8])},d(n){n&&q(e)}}}function Kt(i){let e,n,r,a,p;const t=[Ct,jt],c=[];function l(w,v){return w[0][1]?0:1}e=l(i),n=c[e]=t[e](i);let d=i[6]&&Ze(i);return{c(){n.c(),r=lt(),d&&d.c(),a=L()},l(w){n.l(w),r=ct(w),d&&d.l(w),a=L()},m(w,v){c[e].m(w,v),G(w,r,v),d&&d.m(w,v),G(w,a,v),p=!0},p(w,[v]){let U=e;e=l(w),e===U?c[e].p(w,v):(W(),A(c[U],1,1,()=>{c[U]=null}),Y(),n=c[e],n?n.p(w,v):(n=c[e]=t[e](w),n.c()),S(n,1),n.m(r.parentNode,r)),w[6]?d?d.p(w,v):(d=Ze(w),d.c(),d.m(a.parentNode,a)):d&&(d.d(1),d=null)},i(w){p||(S(n),p=!0)},o(w){A(n),p=!1},d(w){c[e].d(w),w&&q(r),d&&d.d(w),w&&q(a)}}}function zt(i,e,n){let{stores:r}=e,{page:a}=e,{components:p}=e,{form:t}=e,{data_0:c=null}=e,{data_1:l=null}=e,{data_2:d=null}=e,{data_3:w=null}=e;ft(r.page.notify);let v=!1,U=!1,j=null;return Oe(()=>{const $=r.page.subscribe(()=>{v&&(n(7,U=!0),n(8,j=document.title||"untitled page"))});return n(6,v=!0),$}),i.$$set=$=>{"stores"in $&&n(9,r=$.stores),"page"in $&&n(10,a=$.page),"components"in $&&n(0,p=$.components),"form"in $&&n(1,t=$.form),"data_0"in $&&n(2,c=$.data_0),"data_1"in $&&n(3,l=$.data_1),"data_2"in $&&n(4,d=$.data_2),"data_3"in $&&n(5,w=$.data_3)},i.$$.update=()=>{i.$$.dirty&1536&&r.page.set(a)},[p,t,c,l,d,w,v,U,j,r,a]}class Wt extends it{constructor(e){super(),ot(this,e,zt,Kt,st,{stores:9,page:10,components:0,form:1,data_0:2,data_1:3,data_2:4,data_3:5})}}const Yt={},ge=[()=>T(()=>import("./chunks/0-dba24ee1.js"),["./chunks/0-dba24ee1.js","./chunks/_layout-b00c1660.js","./components/pages/_layout.svelte-79f2dbdf.js","./chunks/index-3b672fbb.js","./chunks/alerts-d6284e64.js","./chunks/index-b585bed5.js","./chunks/update-e75f62cf.js","./chunks/sweetalert2.all-b59b2082.js","./chunks/_commonjsHelpers-edff4021.js","./chunks/theme-selector-bbacf5b5.js","./chunks/localforage-e8653f69.js","./assets/_layout-bc435ffc.css"],import.meta.url),()=>T(()=>import("./chunks/1-4e856669.js"),["./chunks/1-4e856669.js","./components/error.svelte-18155622.js","./chunks/index-3b672fbb.js","./chunks/singletons-fb12cd40.js","./chunks/index-b585bed5.js"],import.meta.url),()=>T(()=>import("./chunks/2-e6803f10.js"),["./chunks/2-e6803f10.js","./components/pages/(main)/_layout.svelte-f74bdf2e.js","./chunks/index-3b672fbb.js","./chunks/Icon-a754690e.js","./chunks/update-e75f62cf.js","./chunks/index-b585bed5.js","./chunks/sweetalert2.all-b59b2082.js","./chunks/_commonjsHelpers-edff4021.js","./chunks/alerts-d6284e64.js","./chunks/localforage-e8653f69.js"],import.meta.url),()=>T(()=>import("./chunks/3-d7ab1036.js"),["./chunks/3-d7ab1036.js","./components/pages/(main)/plugins/_layout.svelte-dd23162b.js","./chunks/index-3b672fbb.js"],import.meta.url),()=>T(()=>import("./chunks/4-d07c6912.js"),["./chunks/4-d07c6912.js","./components/pages/(main)/server/_server_/_layout.svelte-b8e92903.js","./chunks/index-3b672fbb.js","./chunks/Icon-a754690e.js"],import.meta.url),()=>T(()=>import("./chunks/5-7644cdfc.js"),["./chunks/5-7644cdfc.js","./components/pages/(main)/settings/_layout.svelte-3ec9e764.js","./chunks/index-3b672fbb.js"],import.meta.url),()=>T(()=>import("./chunks/6-a2fafacc.js"),["./chunks/6-a2fafacc.js","./components/pages/(main)/toolbox/_layout.svelte-997bc535.js","./chunks/index-3b672fbb.js"],import.meta.url),()=>T(()=>import("./chunks/7-4fddeebf.js"),["./chunks/7-4fddeebf.js","./chunks/_page-da46b06b.js","./components/pages/(main)/_page.svelte-95664ef8.js","./chunks/index-3b672fbb.js","./chunks/sweetalert2.all-b59b2082.js","./chunks/_commonjsHelpers-edff4021.js","./chunks/alerts-d6284e64.js","./chunks/index-b585bed5.js"],import.meta.url),()=>T(()=>import("./chunks/8-8beca359.js"),["./chunks/8-8beca359.js","./components/pages/(main)/dm/_page.svelte-6ede0a1d.js","./chunks/index-3b672fbb.js"],import.meta.url),()=>T(()=>import("./chunks/9-958c9a86.js"),["./chunks/9-958c9a86.js","./components/pages/(main)/plugins/_page.svelte-6ede0a1d.js","./chunks/index-3b672fbb.js"],import.meta.url),()=>T(()=>import("./chunks/10-534a0a81.js"),["./chunks/10-534a0a81.js","./components/pages/(main)/profile/_page.svelte-8812149d.js","./chunks/preload-helper-41c905a7.js","./chunks/index-3b672fbb.js","./chunks/sweetalert2.all-b59b2082.js","./chunks/_commonjsHelpers-edff4021.js"],import.meta.url),()=>T(()=>import("./chunks/11-23a952fb.js"),["./chunks/11-23a952fb.js","./components/pages/(main)/server/_server_/_page.svelte-2f1590cf.js","./chunks/index-3b672fbb.js"],import.meta.url),()=>T(()=>import("./chunks/12-823e6bdf.js"),["./chunks/12-823e6bdf.js","./components/pages/(main)/server/_server_/channel/_channel_/_page.svelte-5dcbb1a8.js","./chunks/index-3b672fbb.js"],import.meta.url),()=>T(()=>import("./chunks/13-99f60c66.js"),["./chunks/13-99f60c66.js","./components/pages/(main)/settings/_page.svelte-6ede0a1d.js","./chunks/index-3b672fbb.js"],import.meta.url),()=>T(()=>import("./chunks/14-60999bd4.js"),["./chunks/14-60999bd4.js","./components/pages/(main)/settings/audio/_page.svelte-f15c35ea.js","./chunks/index-3b672fbb.js","./assets/_page-91244bf2.css"],import.meta.url),()=>T(()=>import("./chunks/15-b9f71fde.js"),["./chunks/15-b9f71fde.js","./components/pages/(main)/settings/language/_page.svelte-f5add03c.js","./chunks/index-3b672fbb.js"],import.meta.url),()=>T(()=>import("./chunks/16-bfa7b1a8.js"),["./chunks/16-bfa7b1a8.js","./components/pages/(main)/settings/overlay/_page.svelte-2d39a5d3.js","./chunks/index-3b672fbb.js","./chunks/theme-selector-bbacf5b5.js","./chunks/index-b585bed5.js","./chunks/localforage-e8653f69.js","./chunks/_commonjsHelpers-edff4021.js"],import.meta.url),()=>T(()=>import("./chunks/17-5536941f.js"),["./chunks/17-5536941f.js","./components/pages/(main)/settings/video/_page.svelte-086f3e92.js","./chunks/index-3b672fbb.js"],import.meta.url),()=>T(()=>import("./chunks/18-bfbe0aa7.js"),["./chunks/18-bfbe0aa7.js","./components/pages/(main)/toolbox/_page.svelte-6ede0a1d.js","./chunks/index-3b672fbb.js"],import.meta.url)],nt=[],Xt={"/(main)":[7,[2]],"/(main)/dm":[8,[2]],"/(main)/plugins":[9,[2,3]],"/(main)/profile":[10,[2]],"/(main)/server/[server]":[11,[2,4]],"/(main)/server/[server]/channel/[channel]":[12,[2,4]],"/(main)/settings":[13,[2,5]],"/(main)/settings/audio":[14,[2,5]],"/(main)/settings/language":[15,[2,5]],"/(main)/settings/overlay":[16,[2,5]],"/(main)/settings/video":[17,[2,5]],"/(main)/toolbox":[18,[2,6]]},Zt={handleError:({error:i})=>{console.error(i)}};let Pe=class{constructor(e,n){this.status=e,typeof n=="string"?this.body={message:n}:n?this.body=n:this.body={message:`Error: ${e}`}}toString(){return JSON.stringify(this.body)}},xe=class{constructor(e,n){this.status=e,this.location=n}};async function Qt(i){var e;for(const n in i)if(typeof((e=i[n])==null?void 0:e.then)=="function")return Object.fromEntries(await Promise.all(Object.entries(i).map(async([r,a])=>[r,await a])));return i}Object.getOwnPropertyNames(Object.prototype).sort().join("\0");const xt=-1,en=-2,tn=-3,nn=-4,an=-5,rn=-6;function on(i){if(typeof i=="number")return r(i,!0);if(!Array.isArray(i)||i.length===0)throw new Error("Invalid input");const e=i,n=Array(e.length);function r(a,p=!1){if(a===xt)return;if(a===tn)return NaN;if(a===nn)return 1/0;if(a===an)return-1/0;if(a===rn)return-0;if(p)throw new Error("Invalid input");if(a in n)return n[a];const t=e[a];if(!t||typeof t!="object")n[a]=t;else if(Array.isArray(t))if(typeof t[0]=="string")switch(t[0]){case"Date":n[a]=new Date(t[1]);break;case"Set":const l=new Set;n[a]=l;for(let v=1;v<t.length;v+=1)l.add(r(t[v]));break;case"Map":const d=new Map;n[a]=d;for(let v=1;v<t.length;v+=2)d.set(r(t[v]),r(t[v+1]));break;case"RegExp":n[a]=new RegExp(t[1],t[2]);break;case"Object":n[a]=Object(t[1]);break;case"BigInt":n[a]=BigInt(t[1]);break;case"null":const w=Object.create(null);n[a]=w;for(let v=1;v<t.length;v+=2)w[t[v]]=r(t[v+1]);break}else{const c=new Array(t.length);n[a]=c;for(let l=0;l<t.length;l+=1){const d=t[l];d!==en&&(c[l]=r(d))}}else{const c={};n[a]=c;for(const l in t){const d=t[l];c[l]=r(d)}}return n[a]}return r(0)}function sn(i){return i.filter(e=>e!=null)}const Le=Vt(ge,nt,Xt,Yt),at=ge[0],Te=ge[1];at();Te();let ne={};try{ne=JSON.parse(sessionStorage[tt])}catch{}function Ae(i){ne[i]=oe()}function ln({target:i,base:e}){var Ge;const n=document.documentElement,r=[];let a=null;const p={before_navigate:[],after_navigate:[]};let t={branch:[],error:null,url:null},c=!1,l=!1,d=!0,w=!1,v=!1,U=!1,j=!1,$,O=(Ge=history.state)==null?void 0:Ge[z];O||(O=Date.now(),history.replaceState({...history.state,[z]:O},"",location.href));const we=ne[O];we&&(history.scrollRestoration="manual",scrollTo(we.x,we.y));let x,Ne,le;async function Ue(){le=le||Promise.resolve(),await le,le=null;const o=new URL(location.href),s=ue(o,!0);a=null,await je(s,o,[])}async function ye(o,{noScroll:s=!1,replaceState:u=!1,keepFocus:f=!1,state:m={},invalidateAll:_=!1},h,b){return typeof o=="string"&&(o=new URL(o,ze(document))),pe({url:o,scroll:s?oe():null,keepfocus:f,redirect_chain:h,details:{state:m,replaceState:u},nav_token:b,accepted:()=>{_&&(j=!0)},blocked:()=>{},type:"goto"})}async function Ve(o){const s=ue(o,!1);if(!s)throw new Error(`Attempted to preload a URL that does not belong to this app: ${o}`);return a={id:s.id,promise:Fe(s).then(u=>(u.type==="loaded"&&u.state.error&&(a=null),u))},a.promise}async function ce(...o){const u=Le.filter(f=>o.some(m=>f.exec(m))).map(f=>Promise.all([...f.layouts,f.leaf].map(m=>m==null?void 0:m[1]())));await Promise.all(u)}async function je(o,s,u,f,m={},_){var b,y;Ne=m;let h=o&&await Fe(o);if(h||(h=await Be(s,{id:null},await ie(new Error(`Not found: ${s.pathname}`),{url:s,params:{},route:{id:null}}),404)),s=(o==null?void 0:o.url)||s,Ne!==m)return!1;if(h.type==="redirect")if(u.length>10||u.includes(s.pathname))h=await fe({status:500,error:await ie(new Error("Redirect loop"),{url:s,params:{},route:{id:null}}),url:s,route:{id:null}});else return ye(new URL(h.location,s).href,{},[...u,s.pathname],m),!1;else((y=(b=h.props)==null?void 0:b.page)==null?void 0:y.status)>=400&&await Q.updated.check()&&await re(s);if(r.length=0,j=!1,w=!0,f&&f.details){const{details:g}=f,k=g.replaceState?0:1;g.state[z]=O+=k,history[g.replaceState?"replaceState":"pushState"](g.state,"",s)}if(a=null,l?(t=h.state,h.props.page&&(h.props.page.url=s),$.$set(h.props)):Ce(h),f){const{scroll:g,keepfocus:k}=f,{activeElement:D}=document;await _e();const J=document.activeElement!==D&&document.activeElement!==document.body;if(!k&&!J&&await Se(),d){const I=s.hash&&document.getElementById(decodeURIComponent(s.hash.slice(1)));g?scrollTo(g.x,g.y):I?I.scrollIntoView():scrollTo(0,0)}}else await _e();d=!0,h.props.page&&(x=h.props.page),_&&_(),w=!1}function Ce(o){var f;t=o.state;const s=document.querySelector("style[data-sveltekit]");s&&s.remove(),x=o.props.page,$=new Wt({target:i,props:{...o.props,stores:Q},hydrate:!0});const u={from:null,to:{params:t.params,route:{id:((f=t.route)==null?void 0:f.id)??null},url:new URL(location.href)},willUnload:!1,type:"enter"};p.after_navigate.forEach(m=>m(u)),l=!0}async function ae({url:o,params:s,branch:u,status:f,error:m,route:_,form:h}){let b="never";for(const I of u)(I==null?void 0:I.slash)!==void 0&&(b=I.slash);o.pathname=vt(o.pathname,b),o.search=o.search;const y={type:"loaded",state:{url:o,params:s,branch:u,error:m,route:_},props:{components:sn(u).map(I=>I.node.component)}};h!==void 0&&(y.props.form=h);let g={},k=!x,D=0;for(let I=0;I<Math.max(u.length,t.branch.length);I+=1){const E=u[I],V=t.branch[I];(E==null?void 0:E.data)!==(V==null?void 0:V.data)&&(k=!0),E&&(g={...g,...E.data},k&&(y.props[`data_${D}`]=g),D+=1)}return(!t.url||o.href!==t.url.href||t.error!==m||h!==void 0&&h!==x.form||k)&&(y.props.page={error:m,params:s,route:{id:(_==null?void 0:_.id)??null},status:f,url:new URL(o),form:h??null,data:k?g:x.data}),y}async function ve({loader:o,parent:s,url:u,params:f,route:m,server_data_node:_}){var g,k,D;let h=null;const b={dependencies:new Set,params:new Set,parent:!1,route:!1,url:!1},y=await o();if((g=y.universal)!=null&&g.load){let J=function(...E){for(const V of E){const{href:K}=new URL(V,u);b.dependencies.add(K)}};const I={route:{get id(){return b.route=!0,m.id}},params:new Proxy(f,{get:(E,V)=>(b.params.add(V),E[V])}),data:(_==null?void 0:_.data)??null,url:kt(u,()=>{b.url=!0}),async fetch(E,V){let K;E instanceof Request?(K=E.url,V={body:E.method==="GET"||E.method==="HEAD"?void 0:await E.blob(),cache:E.cache,credentials:E.credentials,headers:E.headers,integrity:E.integrity,keepalive:E.keepalive,method:E.method,mode:E.mode,redirect:E.redirect,referrer:E.referrer,referrerPolicy:E.referrerPolicy,signal:E.signal,...V}):K=E;const Z=new URL(K,u).href;return J(Z),l?Ot(K,Z,V):St(K,V)},setHeaders:()=>{},depends:J,parent(){return b.parent=!0,s()}};h=await y.universal.load.call(null,I)??null,h=h?await Qt(h):null}return{node:y,loader:o,server:_,universal:(k=y.universal)!=null&&k.load?{type:"data",data:h,uses:b}:null,data:h??(_==null?void 0:_.data)??null,slash:((D=y.universal)==null?void 0:D.trailingSlash)??(_==null?void 0:_.slash)}}function qe(o,s,u,f,m){if(j)return!0;if(!f)return!1;if(f.parent&&o||f.route&&s||f.url&&u)return!0;for(const _ of f.params)if(m[_]!==t.params[_])return!0;for(const _ of f.dependencies)if(r.some(h=>h(new URL(_))))return!0;return!1}function be(o,s){return(o==null?void 0:o.type)==="data"?{type:"data",data:o.data,uses:{dependencies:new Set(o.uses.dependencies??[]),params:new Set(o.uses.params??[]),parent:!!o.uses.parent,route:!!o.uses.route,url:!!o.uses.url},slash:o.slash}:(o==null?void 0:o.type)==="skip"?s??null:null}async function Fe({id:o,invalidating:s,url:u,params:f,route:m}){if((a==null?void 0:a.id)===o)return a.promise;const{errors:_,layouts:h,leaf:b}=m,y=[...h,b];_.forEach(R=>R==null?void 0:R().catch(()=>{})),y.forEach(R=>R==null?void 0:R[1]().catch(()=>{}));let g=null;const k=t.url?o!==t.url.pathname+t.url.search:!1,D=t.route?m.id!==t.route.id:!1;let J=!1;const I=y.map((R,C)=>{var ee;const P=t.branch[C],N=!!(R!=null&&R[0])&&((P==null?void 0:P.loader)!==R[1]||qe(J,D,k,(ee=P.server)==null?void 0:ee.uses,f));return N&&(J=!0),N});if(I.some(Boolean)){try{g=await et(u,I)}catch(R){return fe({status:500,error:await ie(R,{url:u,params:f,route:{id:m.id}}),url:u,route:m})}if(g.type==="redirect")return g}const E=g==null?void 0:g.nodes;let V=!1;const K=y.map(async(R,C)=>{var Ee;if(!R)return;const P=t.branch[C],N=E==null?void 0:E[C];if((!N||N.type==="skip")&&R[1]===(P==null?void 0:P.loader)&&!qe(V,D,k,(Ee=P.universal)==null?void 0:Ee.uses,f))return P;if(V=!0,(N==null?void 0:N.type)==="error")throw N;return ve({loader:R[1],url:u,params:f,route:m,parent:async()=>{var Ke;const Je={};for(let $e=0;$e<C;$e+=1)Object.assign(Je,(Ke=await K[$e])==null?void 0:Ke.data);return Je},server_data_node:be(N===void 0&&R[0]?{type:"skip"}:N??null,P==null?void 0:P.server)})});for(const R of K)R.catch(()=>{});const Z=[];for(let R=0;R<y.length;R+=1)if(y[R])try{Z.push(await K[R])}catch(C){if(C instanceof xe)return{type:"redirect",location:C.location};let P=500,N;if(E!=null&&E.includes(C))P=C.status??P,N=C.error;else if(C instanceof Pe)P=C.status,N=C.body;else{if(await Q.updated.check())return await re(u);N=await ie(C,{params:f,url:u,route:{id:m.id}})}const ee=await Me(R,Z,_);return ee?await ae({url:u,params:f,branch:Z.slice(0,ee.idx).concat(ee.node),status:P,error:N,route:m}):await Be(u,{id:m.id},N,P)}else Z.push(void 0);return await ae({url:u,params:f,branch:Z,status:200,error:null,route:m,form:s?void 0:null})}async function Me(o,s,u){for(;o--;)if(u[o]){let f=o;for(;!s[f];)f-=1;try{return{idx:f+1,node:{node:await u[o](),loader:u[o],data:{},server:null,universal:null}}}catch{continue}}}async function fe({status:o,error:s,url:u,route:f}){const m={};let _=null;if(nt[0]===0)try{const g=await et(u,[!0]);if(g.type!=="data"||g.nodes[0]&&g.nodes[0].type!=="data")throw 0;_=g.nodes[0]??null}catch{(u.origin!==location.origin||u.pathname!==location.pathname||c)&&await re(u)}const b=await ve({loader:at,url:u,params:m,route:f,parent:()=>Promise.resolve({}),server_data_node:be(_)}),y={node:await Te(),loader:Te,universal:null,server:null,data:null};return await ae({url:u,params:m,branch:[b,y],status:o,error:s,route:null})}function ue(o,s){if(Ye(o,e))return;const u=de(o);for(const f of Le){const m=f.exec(u);if(m)return{id:o.pathname+o.search,invalidating:s,route:f,params:Et(m),url:o}}}function de(o){return bt(o.pathname.slice(e.length)||"/")}function He({url:o,type:s,intent:u,delta:f}){var b,y;let m=!1;const _={from:{params:t.params,route:{id:((b=t.route)==null?void 0:b.id)??null},url:t.url},to:{params:(u==null?void 0:u.params)??null,route:{id:((y=u==null?void 0:u.route)==null?void 0:y.id)??null},url:o},willUnload:!u,type:s};f!==void 0&&(_.delta=f);const h={..._,cancel:()=>{m=!0}};return v||p.before_navigate.forEach(g=>g(h)),m?null:_}async function pe({url:o,scroll:s,keepfocus:u,redirect_chain:f,details:m,type:_,delta:h,nav_token:b,accepted:y,blocked:g}){const k=ue(o,!1),D=He({url:o,type:_,delta:h,intent:k});if(!D){g();return}Ae(O),y(),v=!0,l&&Q.navigating.set(D),await je(k,o,f,{scroll:s,keepfocus:u,details:m},b,()=>{v=!1,p.after_navigate.forEach(J=>J(D)),Q.navigating.set(null)})}async function Be(o,s,u,f){return o.origin===location.origin&&o.pathname===location.pathname&&!c?await fe({status:f,error:u,url:o,route:s}):await re(o)}function re(o){return location.href=o.href,new Promise(()=>{})}function rt(){let o;n.addEventListener("mousemove",_=>{const h=_.target;clearTimeout(o),o=setTimeout(()=>{f(h,2)},20)});function s(_){f(_.composedPath()[0],1)}n.addEventListener("mousedown",s),n.addEventListener("touchstart",s,{passive:!0});const u=new IntersectionObserver(_=>{for(const h of _)h.isIntersecting&&(ce(de(new URL(h.target.href))),u.unobserve(h.target))},{threshold:0});function f(_,h){const b=We(_,n);if(!b)return;const{url:y,external:g}=Re(b,e);if(g)return;const k=me(b);k.reload||(h<=k.preload_data?Ve(y):h<=k.preload_code&&ce(de(y)))}function m(){u.disconnect();for(const _ of n.querySelectorAll("a")){const{url:h,external:b}=Re(_,e);if(b)continue;const y=me(_);y.reload||(y.preload_code===Xe.viewport&&u.observe(_),y.preload_code===Xe.eager&&ce(de(h)))}}p.after_navigate.push(m),m()}return{after_navigate:o=>{Oe(()=>(p.after_navigate.push(o),()=>{const s=p.after_navigate.indexOf(o);p.after_navigate.splice(s,1)}))},before_navigate:o=>{Oe(()=>(p.before_navigate.push(o),()=>{const s=p.before_navigate.indexOf(o);p.before_navigate.splice(s,1)}))},disable_scroll_handling:()=>{(w||!l)&&(d=!1)},goto:(o,s={})=>ye(o,s,[]),invalidate:o=>{if(typeof o=="function")r.push(o);else{const{href:s}=new URL(o,location.href);r.push(u=>u.href===s)}return Ue()},invalidateAll:()=>(j=!0,Ue()),preload_data:async o=>{const s=new URL(o,ze(document));await Ve(s)},preload_code:ce,apply_action:async o=>{if(o.type==="error"){const s=new URL(location.href),{branch:u,route:f}=t;if(!f)return;const m=await Me(t.branch.length,u,f.errors);if(m){const _=await ae({url:s,params:t.params,branch:u.slice(0,m.idx).concat(m.node),status:o.status??500,error:o.error,route:f});t=_.state,$.$set(_.props),_e().then(Se)}}else if(o.type==="redirect")ye(o.location,{invalidateAll:!0},[]);else{const s={form:o.data,page:{...x,form:o.data,status:o.status}};$.$set(s),o.type==="success"&&_e().then(Se)}},_start_router:()=>{var o;history.scrollRestoration="manual",addEventListener("beforeunload",s=>{var f;let u=!1;if(!v){const m={from:{params:t.params,route:{id:((f=t.route)==null?void 0:f.id)??null},url:t.url},to:null,willUnload:!0,type:"leave",cancel:()=>u=!0};p.before_navigate.forEach(_=>_(m))}u?(s.preventDefault(),s.returnValue=""):history.scrollRestoration="auto"}),addEventListener("visibilitychange",()=>{if(document.visibilityState==="hidden"){Ae(O);try{sessionStorage[tt]=JSON.stringify(ne)}catch{}}}),(o=navigator.connection)!=null&&o.saveData||rt(),n.addEventListener("click",s=>{if(s.button||s.which!==1||s.metaKey||s.ctrlKey||s.shiftKey||s.altKey||s.defaultPrevented)return;const u=We(s.composedPath()[0],n);if(!u)return;const{url:f,external:m,target:_}=Re(u,e);if(!f)return;if(_==="_parent"||_==="_top"){if(window.parent!==window)return}else if(_&&_!=="_self")return;const h=me(u);if(!(u instanceof SVGAElement)&&f.protocol!==location.protocol&&!(f.protocol==="https:"||f.protocol==="http:"))return;if(m||h.reload){He({url:f,type:"link"})||s.preventDefault(),v=!0;return}const[y,g]=f.href.split("#");if(g!==void 0&&y===location.href.split("#")[0]){U=!0,Ae(O),t.url=f,Q.page.set({...x,url:f}),Q.page.notify();return}pe({url:f,scroll:h.noscroll?oe():null,keepfocus:!1,redirect_chain:[],details:{state:{},replaceState:f.href===location.href},accepted:()=>s.preventDefault(),blocked:()=>s.preventDefault(),type:"link"})}),n.addEventListener("submit",s=>{if(s.defaultPrevented)return;const u=HTMLFormElement.prototype.cloneNode.call(s.target),f=s.submitter;if(((f==null?void 0:f.formMethod)||u.method)!=="get")return;const _=new URL((f==null?void 0:f.hasAttribute("formaction"))&&(f==null?void 0:f.formAction)||u.action);if(Ye(_,e))return;const h=s.target,{noscroll:b,reload:y}=me(h);if(y)return;s.preventDefault(),s.stopPropagation();const g=new FormData(h),k=f==null?void 0:f.getAttribute("name");k&&g.append(k,(f==null?void 0:f.getAttribute("value"))??""),_.search=new URLSearchParams(g).toString(),pe({url:_,scroll:b?oe():null,keepfocus:!1,redirect_chain:[],details:{state:{},replaceState:!1},nav_token:{},accepted:()=>{},blocked:()=>{},type:"form"})}),addEventListener("popstate",s=>{var u;if((u=s.state)!=null&&u[z]){if(s.state[z]===O)return;const f=ne[s.state[z]];if(t.url.href.split("#")[0]===location.href.split("#")[0]){ne[O]=oe(),O=s.state[z],scrollTo(f.x,f.y);return}const m=s.state[z]-O;pe({url:new URL(location.href),scroll:f,keepfocus:!1,redirect_chain:[],details:null,accepted:()=>{O=s.state[z]},blocked:()=>{history.go(-m)},type:"popstate",delta:m})}}),addEventListener("hashchange",()=>{U&&(U=!1,history.replaceState({...history.state,[z]:++O},"",location.href))});for(const s of document.querySelectorAll("link"))s.rel==="icon"&&(s.href=s.href);addEventListener("pageshow",s=>{s.persisted&&Q.navigating.set(null)})},_hydrate:async({status:o=200,error:s,node_ids:u,params:f,route:m,data:_,form:h})=>{c=!0;const b=new URL(location.href);({params:f={},route:m={id:null}}=ue(b,!1)||{});let y;try{const g=u.map(async(k,D)=>{const J=_[D];return ve({loader:ge[k],url:b,params:f,route:m,parent:async()=>{const I={};for(let E=0;E<D;E+=1)Object.assign(I,(await g[E]).data);return I},server_data_node:be(J)})});y=await ae({url:b,params:f,branch:await Promise.all(g),status:o,error:s,form:h,route:Le.find(({id:k})=>k===m.id)??null})}catch(g){if(g instanceof xe){await re(new URL(g.location,location.href));return}y=await fe({status:g instanceof Pe?g.status:500,error:await ie(g,{url:b,params:f,route:m}),url:b,route:m})}Ce(y)}}}async function et(i,e){var p;const n=new URL(i);n.pathname=Lt(i.pathname),n.searchParams.append("x-sveltekit-invalidated",e.map(t=>t?"1":"").join("_"));const r=await he(n.href),a=await r.json();if(!r.ok)throw new Error(a);return(p=a.nodes)==null||p.forEach(t=>{(t==null?void 0:t.type)==="data"&&(t.data=on(t.data),t.uses={dependencies:new Set(t.uses.dependencies??[]),params:new Set(t.uses.params??[]),parent:!!t.uses.parent,route:!!t.uses.route,url:!!t.uses.url})}),a}function ie(i,e){return i instanceof Pe?i.body:Zt.handleError({error:i,event:e})??{message:e.route.id!=null?"Internal Error":"Not Found"}}function Se(){const i=document.querySelector("[autofocus]");if(i)i.focus();else{const e=document.body,n=e.getAttribute("tabindex");return e.tabIndex=-1,e.focus({preventScroll:!0}),n!==null?e.setAttribute("tabindex",n):e.removeAttribute("tabindex"),new Promise(r=>{setTimeout(()=>{var a;r((a=getSelection())==null?void 0:a.removeAllRanges())})})}}async function _n({env:i,hydrate:e,paths:n,target:r,version:a}){gt(n),yt(a);const p=ln({target:r,base:n.base});wt({client:p}),e?await p._hydrate(e):p.goto(location.href,{replaceState:!0}),p._start_router()}export{_n as start};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
