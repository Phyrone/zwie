import{S as fr,i as sr,s as lr,k as O,a as ur,q as ot,l as G,m as q,h as k,c as cr,r as ut,n as Y,C,b as v,D as P,E as Sr,F as kr,u as ct,G as ft,H as Ar,I as st,B as Q,J as ir,f as J,g as lt,d as ht,t as K,K as at,L as pt,w as Lr,x as Nr,y as Mr,z as Dr,M as yt,N as wt,O as dt,P as xt,o as Ur}from"../../chunks/index-7a739a2d.js";import{a as Bt,i as mt}from"../../chunks/update-70f373a7.js";import{l as $r}from"../../chunks/theme-selector-cc60be6b.js";var Pr={},rr={};rr.byteLength=It;rr.toByteArray=_t;rr.fromByteArray=$t;var N=[],S=[],gt=typeof Uint8Array<"u"?Uint8Array:Array,or="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";for(var z=0,Et=or.length;z<Et;++z)N[z]=or[z],S[or.charCodeAt(z)]=z;S["-".charCodeAt(0)]=62;S["_".charCodeAt(0)]=63;function Or(l){var c=l.length;if(c%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var h=l.indexOf("=");h===-1&&(h=c);var p=h===c?0:4-h%4;return[h,p]}function It(l){var c=Or(l),h=c[0],p=c[1];return(h+p)*3/4-p}function Ft(l,c,h){return(c+h)*3/4-h}function _t(l){var c,h=Or(l),p=h[0],a=h[1],y=new gt(Ft(l,p,a)),s=0,o=a>0?p-4:p,w;for(w=0;w<o;w+=4)c=S[l.charCodeAt(w)]<<18|S[l.charCodeAt(w+1)]<<12|S[l.charCodeAt(w+2)]<<6|S[l.charCodeAt(w+3)],y[s++]=c>>16&255,y[s++]=c>>8&255,y[s++]=c&255;return a===2&&(c=S[l.charCodeAt(w)]<<2|S[l.charCodeAt(w+1)]>>4,y[s++]=c&255),a===1&&(c=S[l.charCodeAt(w)]<<10|S[l.charCodeAt(w+1)]<<4|S[l.charCodeAt(w+2)]>>2,y[s++]=c>>8&255,y[s++]=c&255),y}function At(l){return N[l>>18&63]+N[l>>12&63]+N[l>>6&63]+N[l&63]}function Ut(l,c,h){for(var p,a=[],y=c;y<h;y+=3)p=(l[y]<<16&16711680)+(l[y+1]<<8&65280)+(l[y+2]&255),a.push(At(p));return a.join("")}function $t(l){for(var c,h=l.length,p=h%3,a=[],y=16383,s=0,o=h-p;s<o;s+=y)a.push(Ut(l,s,s+y>o?o:s+y));return p===1?(c=l[h-1],a.push(N[c>>2]+N[c<<4&63]+"==")):p===2&&(c=(l[h-2]<<8)+l[h-1],a.push(N[c>>10]+N[c>>4&63]+N[c<<2&63]+"=")),a.join("")}var hr={};/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */hr.read=function(l,c,h,p,a){var y,s,o=a*8-p-1,w=(1<<o)-1,E=w>>1,B=-7,F=h?a-1:0,$=h?-1:1,x=l[c+F];for(F+=$,y=x&(1<<-B)-1,x>>=-B,B+=o;B>0;y=y*256+l[c+F],F+=$,B-=8);for(s=y&(1<<-B)-1,y>>=-B,B+=p;B>0;s=s*256+l[c+F],F+=$,B-=8);if(y===0)y=1-E;else{if(y===w)return s?NaN:(x?-1:1)*(1/0);s=s+Math.pow(2,p),y=y-E}return(x?-1:1)*s*Math.pow(2,y-p)};hr.write=function(l,c,h,p,a,y){var s,o,w,E=y*8-a-1,B=(1<<E)-1,F=B>>1,$=a===23?Math.pow(2,-24)-Math.pow(2,-77):0,x=p?0:y-1,m=p?1:-1,g=c<0||c===0&&1/c<0?1:0;for(c=Math.abs(c),isNaN(c)||c===1/0?(o=isNaN(c)?1:0,s=B):(s=Math.floor(Math.log(c)/Math.LN2),c*(w=Math.pow(2,-s))<1&&(s--,w*=2),s+F>=1?c+=$/w:c+=$*Math.pow(2,1-F),c*w>=2&&(s++,w/=2),s+F>=B?(o=0,s=B):s+F>=1?(o=(c*w-1)*Math.pow(2,a),s=s+F):(o=c*Math.pow(2,F-1)*Math.pow(2,a),s=0));a>=8;l[h+x]=o&255,x+=m,o/=256,a-=8);for(s=s<<a|o,E+=a;E>0;l[h+x]=s&255,x+=m,s/=256,E-=8);l[h+x-m]|=g*128};/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */(function(l){const c=rr,h=hr,p=typeof Symbol=="function"&&typeof Symbol.for=="function"?Symbol.for("nodejs.util.inspect.custom"):null;l.Buffer=o,l.SlowBuffer=R,l.INSPECT_MAX_BYTES=50;const a=2147483647;l.kMaxLength=a,o.TYPED_ARRAY_SUPPORT=y(),!o.TYPED_ARRAY_SUPPORT&&typeof console<"u"&&typeof console.error=="function"&&console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");function y(){try{const e=new Uint8Array(1),r={foo:function(){return 42}};return Object.setPrototypeOf(r,Uint8Array.prototype),Object.setPrototypeOf(e,r),e.foo()===42}catch{return!1}}Object.defineProperty(o.prototype,"parent",{enumerable:!0,get:function(){if(o.isBuffer(this))return this.buffer}}),Object.defineProperty(o.prototype,"offset",{enumerable:!0,get:function(){if(o.isBuffer(this))return this.byteOffset}});function s(e){if(e>a)throw new RangeError('The value "'+e+'" is invalid for option "size"');const r=new Uint8Array(e);return Object.setPrototypeOf(r,o.prototype),r}function o(e,r,t){if(typeof e=="number"){if(typeof r=="string")throw new TypeError('The "string" argument must be of type string. Received type number');return F(e)}return w(e,r,t)}o.poolSize=8192;function w(e,r,t){if(typeof e=="string")return $(e,r);if(ArrayBuffer.isView(e))return m(e);if(e==null)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(L(e,ArrayBuffer)||e&&L(e.buffer,ArrayBuffer)||typeof SharedArrayBuffer<"u"&&(L(e,SharedArrayBuffer)||e&&L(e.buffer,SharedArrayBuffer)))return g(e,r,t);if(typeof e=="number")throw new TypeError('The "value" argument must not be of type number. Received type number');const n=e.valueOf&&e.valueOf();if(n!=null&&n!==e)return o.from(n,r,t);const i=W(e);if(i)return i;if(typeof Symbol<"u"&&Symbol.toPrimitive!=null&&typeof e[Symbol.toPrimitive]=="function")return o.from(e[Symbol.toPrimitive]("string"),r,t);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}o.from=function(e,r,t){return w(e,r,t)},Object.setPrototypeOf(o.prototype,Uint8Array.prototype),Object.setPrototypeOf(o,Uint8Array);function E(e){if(typeof e!="number")throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function B(e,r,t){return E(e),e<=0?s(e):r!==void 0?typeof t=="string"?s(e).fill(r,t):s(e).fill(r):s(e)}o.alloc=function(e,r,t){return B(e,r,t)};function F(e){return E(e),s(e<0?0:M(e)|0)}o.allocUnsafe=function(e){return F(e)},o.allocUnsafeSlow=function(e){return F(e)};function $(e,r){if((typeof r!="string"||r==="")&&(r="utf8"),!o.isEncoding(r))throw new TypeError("Unknown encoding: "+r);const t=ar(e,r)|0;let n=s(t);const i=n.write(e,r);return i!==t&&(n=n.slice(0,i)),n}function x(e){const r=e.length<0?0:M(e.length)|0,t=s(r);for(let n=0;n<r;n+=1)t[n]=e[n]&255;return t}function m(e){if(L(e,Uint8Array)){const r=new Uint8Array(e);return g(r.buffer,r.byteOffset,r.byteLength)}return x(e)}function g(e,r,t){if(r<0||e.byteLength<r)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<r+(t||0))throw new RangeError('"length" is outside of buffer bounds');let n;return r===void 0&&t===void 0?n=new Uint8Array(e):t===void 0?n=new Uint8Array(e,r):n=new Uint8Array(e,r,t),Object.setPrototypeOf(n,o.prototype),n}function W(e){if(o.isBuffer(e)){const r=M(e.length)|0,t=s(r);return t.length===0||e.copy(t,0,0,r),t}if(e.length!==void 0)return typeof e.length!="number"||nr(e.length)?s(0):x(e);if(e.type==="Buffer"&&Array.isArray(e.data))return x(e.data)}function M(e){if(e>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return e|0}function R(e){return+e!=e&&(e=0),o.alloc(+e)}o.isBuffer=function(r){return r!=null&&r._isBuffer===!0&&r!==o.prototype},o.compare=function(r,t){if(L(r,Uint8Array)&&(r=o.from(r,r.offset,r.byteLength)),L(t,Uint8Array)&&(t=o.from(t,t.offset,t.byteLength)),!o.isBuffer(r)||!o.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(r===t)return 0;let n=r.length,i=t.length;for(let u=0,f=Math.min(n,i);u<f;++u)if(r[u]!==t[u]){n=r[u],i=t[u];break}return n<i?-1:i<n?1:0},o.isEncoding=function(r){switch(String(r).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},o.concat=function(r,t){if(!Array.isArray(r))throw new TypeError('"list" argument must be an Array of Buffers');if(r.length===0)return o.alloc(0);let n;if(t===void 0)for(t=0,n=0;n<r.length;++n)t+=r[n].length;const i=o.allocUnsafe(t);let u=0;for(n=0;n<r.length;++n){let f=r[n];if(L(f,Uint8Array))u+f.length>i.length?(o.isBuffer(f)||(f=o.from(f)),f.copy(i,u)):Uint8Array.prototype.set.call(i,f,u);else if(o.isBuffer(f))f.copy(i,u);else throw new TypeError('"list" argument must be an Array of Buffers');u+=f.length}return i};function ar(e,r){if(o.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||L(e,ArrayBuffer))return e.byteLength;if(typeof e!="string")throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const t=e.length,n=arguments.length>2&&arguments[2]===!0;if(!n&&t===0)return 0;let i=!1;for(;;)switch(r){case"ascii":case"latin1":case"binary":return t;case"utf8":case"utf-8":return er(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return t*2;case"hex":return t>>>1;case"base64":return _r(e).length;default:if(i)return n?-1:er(e).length;r=(""+r).toLowerCase(),i=!0}}o.byteLength=ar;function Gr(e,r,t){let n=!1;if((r===void 0||r<0)&&(r=0),r>this.length||((t===void 0||t>this.length)&&(t=this.length),t<=0)||(t>>>=0,r>>>=0,t<=r))return"";for(e||(e="utf8");;)switch(e){case"hex":return Kr(this,r,t);case"utf8":case"utf-8":return wr(this,r,t);case"ascii":return Jr(this,r,t);case"latin1":case"binary":return Xr(this,r,t);case"base64":return Hr(this,r,t);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Zr(this,r,t);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}o.prototype._isBuffer=!0;function V(e,r,t){const n=e[r];e[r]=e[t],e[t]=n}o.prototype.swap16=function(){const r=this.length;if(r%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<r;t+=2)V(this,t,t+1);return this},o.prototype.swap32=function(){const r=this.length;if(r%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<r;t+=4)V(this,t,t+3),V(this,t+1,t+2);return this},o.prototype.swap64=function(){const r=this.length;if(r%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<r;t+=8)V(this,t,t+7),V(this,t+1,t+6),V(this,t+2,t+5),V(this,t+3,t+4);return this},o.prototype.toString=function(){const r=this.length;return r===0?"":arguments.length===0?wr(this,0,r):Gr.apply(this,arguments)},o.prototype.toLocaleString=o.prototype.toString,o.prototype.equals=function(r){if(!o.isBuffer(r))throw new TypeError("Argument must be a Buffer");return this===r?!0:o.compare(this,r)===0},o.prototype.inspect=function(){let r="";const t=l.INSPECT_MAX_BYTES;return r=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim(),this.length>t&&(r+=" ... "),"<Buffer "+r+">"},p&&(o.prototype[p]=o.prototype.inspect),o.prototype.compare=function(r,t,n,i,u){if(L(r,Uint8Array)&&(r=o.from(r,r.offset,r.byteLength)),!o.isBuffer(r))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof r);if(t===void 0&&(t=0),n===void 0&&(n=r?r.length:0),i===void 0&&(i=0),u===void 0&&(u=this.length),t<0||n>r.length||i<0||u>this.length)throw new RangeError("out of range index");if(i>=u&&t>=n)return 0;if(i>=u)return-1;if(t>=n)return 1;if(t>>>=0,n>>>=0,i>>>=0,u>>>=0,this===r)return 0;let f=u-i,d=n-t;const A=Math.min(f,d),_=this.slice(i,u),U=r.slice(t,n);for(let I=0;I<A;++I)if(_[I]!==U[I]){f=_[I],d=U[I];break}return f<d?-1:d<f?1:0};function pr(e,r,t,n,i){if(e.length===0)return-1;if(typeof t=="string"?(n=t,t=0):t>2147483647?t=2147483647:t<-2147483648&&(t=-2147483648),t=+t,nr(t)&&(t=i?0:e.length-1),t<0&&(t=e.length+t),t>=e.length){if(i)return-1;t=e.length-1}else if(t<0)if(i)t=0;else return-1;if(typeof r=="string"&&(r=o.from(r,n)),o.isBuffer(r))return r.length===0?-1:yr(e,r,t,n,i);if(typeof r=="number")return r=r&255,typeof Uint8Array.prototype.indexOf=="function"?i?Uint8Array.prototype.indexOf.call(e,r,t):Uint8Array.prototype.lastIndexOf.call(e,r,t):yr(e,[r],t,n,i);throw new TypeError("val must be string, number or Buffer")}function yr(e,r,t,n,i){let u=1,f=e.length,d=r.length;if(n!==void 0&&(n=String(n).toLowerCase(),n==="ucs2"||n==="ucs-2"||n==="utf16le"||n==="utf-16le")){if(e.length<2||r.length<2)return-1;u=2,f/=2,d/=2,t/=2}function A(U,I){return u===1?U[I]:U.readUInt16BE(I*u)}let _;if(i){let U=-1;for(_=t;_<f;_++)if(A(e,_)===A(r,U===-1?0:_-U)){if(U===-1&&(U=_),_-U+1===d)return U*u}else U!==-1&&(_-=_-U),U=-1}else for(t+d>f&&(t=f-d),_=t;_>=0;_--){let U=!0;for(let I=0;I<d;I++)if(A(e,_+I)!==A(r,I)){U=!1;break}if(U)return _}return-1}o.prototype.includes=function(r,t,n){return this.indexOf(r,t,n)!==-1},o.prototype.indexOf=function(r,t,n){return pr(this,r,t,n,!0)},o.prototype.lastIndexOf=function(r,t,n){return pr(this,r,t,n,!1)};function qr(e,r,t,n){t=Number(t)||0;const i=e.length-t;n?(n=Number(n),n>i&&(n=i)):n=i;const u=r.length;n>u/2&&(n=u/2);let f;for(f=0;f<n;++f){const d=parseInt(r.substr(f*2,2),16);if(nr(d))return f;e[t+f]=d}return f}function Vr(e,r,t,n){return Z(er(r,e.length-t),e,t,n)}function Yr(e,r,t,n){return Z(tt(r),e,t,n)}function Wr(e,r,t,n){return Z(_r(r),e,t,n)}function jr(e,r,t,n){return Z(et(r,e.length-t),e,t,n)}o.prototype.write=function(r,t,n,i){if(t===void 0)i="utf8",n=this.length,t=0;else if(n===void 0&&typeof t=="string")i=t,n=this.length,t=0;else if(isFinite(t))t=t>>>0,isFinite(n)?(n=n>>>0,i===void 0&&(i="utf8")):(i=n,n=void 0);else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");const u=this.length-t;if((n===void 0||n>u)&&(n=u),r.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");let f=!1;for(;;)switch(i){case"hex":return qr(this,r,t,n);case"utf8":case"utf-8":return Vr(this,r,t,n);case"ascii":case"latin1":case"binary":return Yr(this,r,t,n);case"base64":return Wr(this,r,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return jr(this,r,t,n);default:if(f)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),f=!0}},o.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function Hr(e,r,t){return r===0&&t===e.length?c.fromByteArray(e):c.fromByteArray(e.slice(r,t))}function wr(e,r,t){t=Math.min(e.length,t);const n=[];let i=r;for(;i<t;){const u=e[i];let f=null,d=u>239?4:u>223?3:u>191?2:1;if(i+d<=t){let A,_,U,I;switch(d){case 1:u<128&&(f=u);break;case 2:A=e[i+1],(A&192)===128&&(I=(u&31)<<6|A&63,I>127&&(f=I));break;case 3:A=e[i+1],_=e[i+2],(A&192)===128&&(_&192)===128&&(I=(u&15)<<12|(A&63)<<6|_&63,I>2047&&(I<55296||I>57343)&&(f=I));break;case 4:A=e[i+1],_=e[i+2],U=e[i+3],(A&192)===128&&(_&192)===128&&(U&192)===128&&(I=(u&15)<<18|(A&63)<<12|(_&63)<<6|U&63,I>65535&&I<1114112&&(f=I))}}f===null?(f=65533,d=1):f>65535&&(f-=65536,n.push(f>>>10&1023|55296),f=56320|f&1023),n.push(f),i+=d}return zr(n)}const dr=4096;function zr(e){const r=e.length;if(r<=dr)return String.fromCharCode.apply(String,e);let t="",n=0;for(;n<r;)t+=String.fromCharCode.apply(String,e.slice(n,n+=dr));return t}function Jr(e,r,t){let n="";t=Math.min(e.length,t);for(let i=r;i<t;++i)n+=String.fromCharCode(e[i]&127);return n}function Xr(e,r,t){let n="";t=Math.min(e.length,t);for(let i=r;i<t;++i)n+=String.fromCharCode(e[i]);return n}function Kr(e,r,t){const n=e.length;(!r||r<0)&&(r=0),(!t||t<0||t>n)&&(t=n);let i="";for(let u=r;u<t;++u)i+=nt[e[u]];return i}function Zr(e,r,t){const n=e.slice(r,t);let i="";for(let u=0;u<n.length-1;u+=2)i+=String.fromCharCode(n[u]+n[u+1]*256);return i}o.prototype.slice=function(r,t){const n=this.length;r=~~r,t=t===void 0?n:~~t,r<0?(r+=n,r<0&&(r=0)):r>n&&(r=n),t<0?(t+=n,t<0&&(t=0)):t>n&&(t=n),t<r&&(t=r);const i=this.subarray(r,t);return Object.setPrototypeOf(i,o.prototype),i};function b(e,r,t){if(e%1!==0||e<0)throw new RangeError("offset is not uint");if(e+r>t)throw new RangeError("Trying to access beyond buffer length")}o.prototype.readUintLE=o.prototype.readUIntLE=function(r,t,n){r=r>>>0,t=t>>>0,n||b(r,t,this.length);let i=this[r],u=1,f=0;for(;++f<t&&(u*=256);)i+=this[r+f]*u;return i},o.prototype.readUintBE=o.prototype.readUIntBE=function(r,t,n){r=r>>>0,t=t>>>0,n||b(r,t,this.length);let i=this[r+--t],u=1;for(;t>0&&(u*=256);)i+=this[r+--t]*u;return i},o.prototype.readUint8=o.prototype.readUInt8=function(r,t){return r=r>>>0,t||b(r,1,this.length),this[r]},o.prototype.readUint16LE=o.prototype.readUInt16LE=function(r,t){return r=r>>>0,t||b(r,2,this.length),this[r]|this[r+1]<<8},o.prototype.readUint16BE=o.prototype.readUInt16BE=function(r,t){return r=r>>>0,t||b(r,2,this.length),this[r]<<8|this[r+1]},o.prototype.readUint32LE=o.prototype.readUInt32LE=function(r,t){return r=r>>>0,t||b(r,4,this.length),(this[r]|this[r+1]<<8|this[r+2]<<16)+this[r+3]*16777216},o.prototype.readUint32BE=o.prototype.readUInt32BE=function(r,t){return r=r>>>0,t||b(r,4,this.length),this[r]*16777216+(this[r+1]<<16|this[r+2]<<8|this[r+3])},o.prototype.readBigUInt64LE=D(function(r){r=r>>>0,H(r,"offset");const t=this[r],n=this[r+7];(t===void 0||n===void 0)&&X(r,this.length-8);const i=t+this[++r]*2**8+this[++r]*2**16+this[++r]*2**24,u=this[++r]+this[++r]*2**8+this[++r]*2**16+n*2**24;return BigInt(i)+(BigInt(u)<<BigInt(32))}),o.prototype.readBigUInt64BE=D(function(r){r=r>>>0,H(r,"offset");const t=this[r],n=this[r+7];(t===void 0||n===void 0)&&X(r,this.length-8);const i=t*2**24+this[++r]*2**16+this[++r]*2**8+this[++r],u=this[++r]*2**24+this[++r]*2**16+this[++r]*2**8+n;return(BigInt(i)<<BigInt(32))+BigInt(u)}),o.prototype.readIntLE=function(r,t,n){r=r>>>0,t=t>>>0,n||b(r,t,this.length);let i=this[r],u=1,f=0;for(;++f<t&&(u*=256);)i+=this[r+f]*u;return u*=128,i>=u&&(i-=Math.pow(2,8*t)),i},o.prototype.readIntBE=function(r,t,n){r=r>>>0,t=t>>>0,n||b(r,t,this.length);let i=t,u=1,f=this[r+--i];for(;i>0&&(u*=256);)f+=this[r+--i]*u;return u*=128,f>=u&&(f-=Math.pow(2,8*t)),f},o.prototype.readInt8=function(r,t){return r=r>>>0,t||b(r,1,this.length),this[r]&128?(255-this[r]+1)*-1:this[r]},o.prototype.readInt16LE=function(r,t){r=r>>>0,t||b(r,2,this.length);const n=this[r]|this[r+1]<<8;return n&32768?n|4294901760:n},o.prototype.readInt16BE=function(r,t){r=r>>>0,t||b(r,2,this.length);const n=this[r+1]|this[r]<<8;return n&32768?n|4294901760:n},o.prototype.readInt32LE=function(r,t){return r=r>>>0,t||b(r,4,this.length),this[r]|this[r+1]<<8|this[r+2]<<16|this[r+3]<<24},o.prototype.readInt32BE=function(r,t){return r=r>>>0,t||b(r,4,this.length),this[r]<<24|this[r+1]<<16|this[r+2]<<8|this[r+3]},o.prototype.readBigInt64LE=D(function(r){r=r>>>0,H(r,"offset");const t=this[r],n=this[r+7];(t===void 0||n===void 0)&&X(r,this.length-8);const i=this[r+4]+this[r+5]*2**8+this[r+6]*2**16+(n<<24);return(BigInt(i)<<BigInt(32))+BigInt(t+this[++r]*2**8+this[++r]*2**16+this[++r]*2**24)}),o.prototype.readBigInt64BE=D(function(r){r=r>>>0,H(r,"offset");const t=this[r],n=this[r+7];(t===void 0||n===void 0)&&X(r,this.length-8);const i=(t<<24)+this[++r]*2**16+this[++r]*2**8+this[++r];return(BigInt(i)<<BigInt(32))+BigInt(this[++r]*2**24+this[++r]*2**16+this[++r]*2**8+n)}),o.prototype.readFloatLE=function(r,t){return r=r>>>0,t||b(r,4,this.length),h.read(this,r,!0,23,4)},o.prototype.readFloatBE=function(r,t){return r=r>>>0,t||b(r,4,this.length),h.read(this,r,!1,23,4)},o.prototype.readDoubleLE=function(r,t){return r=r>>>0,t||b(r,8,this.length),h.read(this,r,!0,52,8)},o.prototype.readDoubleBE=function(r,t){return r=r>>>0,t||b(r,8,this.length),h.read(this,r,!1,52,8)};function T(e,r,t,n,i,u){if(!o.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(r>i||r<u)throw new RangeError('"value" argument is out of bounds');if(t+n>e.length)throw new RangeError("Index out of range")}o.prototype.writeUintLE=o.prototype.writeUIntLE=function(r,t,n,i){if(r=+r,t=t>>>0,n=n>>>0,!i){const d=Math.pow(2,8*n)-1;T(this,r,t,n,d,0)}let u=1,f=0;for(this[t]=r&255;++f<n&&(u*=256);)this[t+f]=r/u&255;return t+n},o.prototype.writeUintBE=o.prototype.writeUIntBE=function(r,t,n,i){if(r=+r,t=t>>>0,n=n>>>0,!i){const d=Math.pow(2,8*n)-1;T(this,r,t,n,d,0)}let u=n-1,f=1;for(this[t+u]=r&255;--u>=0&&(f*=256);)this[t+u]=r/f&255;return t+n},o.prototype.writeUint8=o.prototype.writeUInt8=function(r,t,n){return r=+r,t=t>>>0,n||T(this,r,t,1,255,0),this[t]=r&255,t+1},o.prototype.writeUint16LE=o.prototype.writeUInt16LE=function(r,t,n){return r=+r,t=t>>>0,n||T(this,r,t,2,65535,0),this[t]=r&255,this[t+1]=r>>>8,t+2},o.prototype.writeUint16BE=o.prototype.writeUInt16BE=function(r,t,n){return r=+r,t=t>>>0,n||T(this,r,t,2,65535,0),this[t]=r>>>8,this[t+1]=r&255,t+2},o.prototype.writeUint32LE=o.prototype.writeUInt32LE=function(r,t,n){return r=+r,t=t>>>0,n||T(this,r,t,4,4294967295,0),this[t+3]=r>>>24,this[t+2]=r>>>16,this[t+1]=r>>>8,this[t]=r&255,t+4},o.prototype.writeUint32BE=o.prototype.writeUInt32BE=function(r,t,n){return r=+r,t=t>>>0,n||T(this,r,t,4,4294967295,0),this[t]=r>>>24,this[t+1]=r>>>16,this[t+2]=r>>>8,this[t+3]=r&255,t+4};function xr(e,r,t,n,i){Fr(r,n,i,e,t,7);let u=Number(r&BigInt(4294967295));e[t++]=u,u=u>>8,e[t++]=u,u=u>>8,e[t++]=u,u=u>>8,e[t++]=u;let f=Number(r>>BigInt(32)&BigInt(4294967295));return e[t++]=f,f=f>>8,e[t++]=f,f=f>>8,e[t++]=f,f=f>>8,e[t++]=f,t}function Br(e,r,t,n,i){Fr(r,n,i,e,t,7);let u=Number(r&BigInt(4294967295));e[t+7]=u,u=u>>8,e[t+6]=u,u=u>>8,e[t+5]=u,u=u>>8,e[t+4]=u;let f=Number(r>>BigInt(32)&BigInt(4294967295));return e[t+3]=f,f=f>>8,e[t+2]=f,f=f>>8,e[t+1]=f,f=f>>8,e[t]=f,t+8}o.prototype.writeBigUInt64LE=D(function(r,t=0){return xr(this,r,t,BigInt(0),BigInt("0xffffffffffffffff"))}),o.prototype.writeBigUInt64BE=D(function(r,t=0){return Br(this,r,t,BigInt(0),BigInt("0xffffffffffffffff"))}),o.prototype.writeIntLE=function(r,t,n,i){if(r=+r,t=t>>>0,!i){const A=Math.pow(2,8*n-1);T(this,r,t,n,A-1,-A)}let u=0,f=1,d=0;for(this[t]=r&255;++u<n&&(f*=256);)r<0&&d===0&&this[t+u-1]!==0&&(d=1),this[t+u]=(r/f>>0)-d&255;return t+n},o.prototype.writeIntBE=function(r,t,n,i){if(r=+r,t=t>>>0,!i){const A=Math.pow(2,8*n-1);T(this,r,t,n,A-1,-A)}let u=n-1,f=1,d=0;for(this[t+u]=r&255;--u>=0&&(f*=256);)r<0&&d===0&&this[t+u+1]!==0&&(d=1),this[t+u]=(r/f>>0)-d&255;return t+n},o.prototype.writeInt8=function(r,t,n){return r=+r,t=t>>>0,n||T(this,r,t,1,127,-128),r<0&&(r=255+r+1),this[t]=r&255,t+1},o.prototype.writeInt16LE=function(r,t,n){return r=+r,t=t>>>0,n||T(this,r,t,2,32767,-32768),this[t]=r&255,this[t+1]=r>>>8,t+2},o.prototype.writeInt16BE=function(r,t,n){return r=+r,t=t>>>0,n||T(this,r,t,2,32767,-32768),this[t]=r>>>8,this[t+1]=r&255,t+2},o.prototype.writeInt32LE=function(r,t,n){return r=+r,t=t>>>0,n||T(this,r,t,4,2147483647,-2147483648),this[t]=r&255,this[t+1]=r>>>8,this[t+2]=r>>>16,this[t+3]=r>>>24,t+4},o.prototype.writeInt32BE=function(r,t,n){return r=+r,t=t>>>0,n||T(this,r,t,4,2147483647,-2147483648),r<0&&(r=4294967295+r+1),this[t]=r>>>24,this[t+1]=r>>>16,this[t+2]=r>>>8,this[t+3]=r&255,t+4},o.prototype.writeBigInt64LE=D(function(r,t=0){return xr(this,r,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),o.prototype.writeBigInt64BE=D(function(r,t=0){return Br(this,r,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))});function mr(e,r,t,n,i,u){if(t+n>e.length)throw new RangeError("Index out of range");if(t<0)throw new RangeError("Index out of range")}function gr(e,r,t,n,i){return r=+r,t=t>>>0,i||mr(e,r,t,4),h.write(e,r,t,n,23,4),t+4}o.prototype.writeFloatLE=function(r,t,n){return gr(this,r,t,!0,n)},o.prototype.writeFloatBE=function(r,t,n){return gr(this,r,t,!1,n)};function Er(e,r,t,n,i){return r=+r,t=t>>>0,i||mr(e,r,t,8),h.write(e,r,t,n,52,8),t+8}o.prototype.writeDoubleLE=function(r,t,n){return Er(this,r,t,!0,n)},o.prototype.writeDoubleBE=function(r,t,n){return Er(this,r,t,!1,n)},o.prototype.copy=function(r,t,n,i){if(!o.isBuffer(r))throw new TypeError("argument should be a Buffer");if(n||(n=0),!i&&i!==0&&(i=this.length),t>=r.length&&(t=r.length),t||(t=0),i>0&&i<n&&(i=n),i===n||r.length===0||this.length===0)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),r.length-t<i-n&&(i=r.length-t+n);const u=i-n;return this===r&&typeof Uint8Array.prototype.copyWithin=="function"?this.copyWithin(t,n,i):Uint8Array.prototype.set.call(r,this.subarray(n,i),t),u},o.prototype.fill=function(r,t,n,i){if(typeof r=="string"){if(typeof t=="string"?(i=t,t=0,n=this.length):typeof n=="string"&&(i=n,n=this.length),i!==void 0&&typeof i!="string")throw new TypeError("encoding must be a string");if(typeof i=="string"&&!o.isEncoding(i))throw new TypeError("Unknown encoding: "+i);if(r.length===1){const f=r.charCodeAt(0);(i==="utf8"&&f<128||i==="latin1")&&(r=f)}}else typeof r=="number"?r=r&255:typeof r=="boolean"&&(r=Number(r));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;t=t>>>0,n=n===void 0?this.length:n>>>0,r||(r=0);let u;if(typeof r=="number")for(u=t;u<n;++u)this[u]=r;else{const f=o.isBuffer(r)?r:o.from(r,i),d=f.length;if(d===0)throw new TypeError('The value "'+r+'" is invalid for argument "value"');for(u=0;u<n-t;++u)this[u+t]=f[u%d]}return this};const j={};function tr(e,r,t){j[e]=class extends t{constructor(){super(),Object.defineProperty(this,"message",{value:r.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(i){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:i,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}tr("ERR_BUFFER_OUT_OF_BOUNDS",function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"},RangeError),tr("ERR_INVALID_ARG_TYPE",function(e,r){return`The "${e}" argument must be of type number. Received type ${typeof r}`},TypeError),tr("ERR_OUT_OF_RANGE",function(e,r,t){let n=`The value of "${e}" is out of range.`,i=t;return Number.isInteger(t)&&Math.abs(t)>2**32?i=Ir(String(t)):typeof t=="bigint"&&(i=String(t),(t>BigInt(2)**BigInt(32)||t<-(BigInt(2)**BigInt(32)))&&(i=Ir(i)),i+="n"),n+=` It must be ${r}. Received ${i}`,n},RangeError);function Ir(e){let r="",t=e.length;const n=e[0]==="-"?1:0;for(;t>=n+4;t-=3)r=`_${e.slice(t-3,t)}${r}`;return`${e.slice(0,t)}${r}`}function Qr(e,r,t){H(r,"offset"),(e[r]===void 0||e[r+t]===void 0)&&X(r,e.length-(t+1))}function Fr(e,r,t,n,i,u){if(e>t||e<r){const f=typeof r=="bigint"?"n":"";let d;throw u>3?r===0||r===BigInt(0)?d=`>= 0${f} and < 2${f} ** ${(u+1)*8}${f}`:d=`>= -(2${f} ** ${(u+1)*8-1}${f}) and < 2 ** ${(u+1)*8-1}${f}`:d=`>= ${r}${f} and <= ${t}${f}`,new j.ERR_OUT_OF_RANGE("value",d,e)}Qr(n,i,u)}function H(e,r){if(typeof e!="number")throw new j.ERR_INVALID_ARG_TYPE(r,"number",e)}function X(e,r,t){throw Math.floor(e)!==e?(H(e,t),new j.ERR_OUT_OF_RANGE(t||"offset","an integer",e)):r<0?new j.ERR_BUFFER_OUT_OF_BOUNDS:new j.ERR_OUT_OF_RANGE(t||"offset",`>= ${t?1:0} and <= ${r}`,e)}const vr=/[^+/0-9A-Za-z-_]/g;function rt(e){if(e=e.split("=")[0],e=e.trim().replace(vr,""),e.length<2)return"";for(;e.length%4!==0;)e=e+"=";return e}function er(e,r){r=r||1/0;let t;const n=e.length;let i=null;const u=[];for(let f=0;f<n;++f){if(t=e.charCodeAt(f),t>55295&&t<57344){if(!i){if(t>56319){(r-=3)>-1&&u.push(239,191,189);continue}else if(f+1===n){(r-=3)>-1&&u.push(239,191,189);continue}i=t;continue}if(t<56320){(r-=3)>-1&&u.push(239,191,189),i=t;continue}t=(i-55296<<10|t-56320)+65536}else i&&(r-=3)>-1&&u.push(239,191,189);if(i=null,t<128){if((r-=1)<0)break;u.push(t)}else if(t<2048){if((r-=2)<0)break;u.push(t>>6|192,t&63|128)}else if(t<65536){if((r-=3)<0)break;u.push(t>>12|224,t>>6&63|128,t&63|128)}else if(t<1114112){if((r-=4)<0)break;u.push(t>>18|240,t>>12&63|128,t>>6&63|128,t&63|128)}else throw new Error("Invalid code point")}return u}function tt(e){const r=[];for(let t=0;t<e.length;++t)r.push(e.charCodeAt(t)&255);return r}function et(e,r){let t,n,i;const u=[];for(let f=0;f<e.length&&!((r-=2)<0);++f)t=e.charCodeAt(f),n=t>>8,i=t%256,u.push(i),u.push(n);return u}function _r(e){return c.toByteArray(rt(e))}function Z(e,r,t,n){let i;for(i=0;i<n&&!(i+t>=r.length||i>=e.length);++i)r[i+t]=e[i];return i}function L(e,r){return e instanceof r||e!=null&&e.constructor!=null&&e.constructor.name!=null&&e.constructor.name===r.name}function nr(e){return e!==e}const nt=function(){const e="0123456789abcdef",r=new Array(256);for(let t=0;t<16;++t){const n=t*16;for(let i=0;i<16;++i)r[n+i]=e[t]+e[i]}return r}();function D(e){return typeof BigInt>"u"?it:e}function it(){throw new Error("BigInt not supported")}})(Pr);window.Buffer=Pr.Buffer;function bt(l){const c=l-1;return c*c*c+1}function br(l,{delay:c=0,duration:h=400,easing:p=bt,x:a=0,y=0,opacity:s=0}={}){const o=getComputedStyle(l),w=+o.opacity,E=o.transform==="none"?"":o.transform,B=w*(1-s);return{delay:c,duration:h,easing:p,css:(F,$)=>`
			transform: ${E} translate(${(1-F)*a}px, ${(1-F)*y}px);
			opacity: ${w-B*$}`}}function Tr(l){let c,h,p,a;return{c(){c=O("button"),h=O("i"),this.h()},l(y){c=G(y,"BUTTON",{class:!0});var s=q(c);h=G(s,"I",{class:!0}),q(h).forEach(k),s.forEach(k),this.h()},h(){Y(h,"class","fa-solid fa-square-xmark"),Y(c,"class","hover:text-neutral-focus active:text-neutral")},m(y,s){v(y,c,s),P(c,h),p||(a=Sr(c,"click",st(kr(l[7]))),p=!0)},p:Q,d(y){y&&k(c),p=!1,a()}}}function Tt(l){let c,h,p,a,y,s,o,w,E,B,F,$,x=l[6]&&Tr(l);return{c(){c=O("div"),h=O("i"),p=ur(),a=O("div"),y=O("span"),s=ot(l[5]),o=ur(),w=O("div"),x&&x.c(),this.h()},l(m){c=G(m,"DIV",{class:!0});var g=q(c);h=G(g,"I",{class:!0}),q(h).forEach(k),p=cr(g),a=G(g,"DIV",{class:!0});var W=q(a);y=G(W,"SPAN",{});var M=q(y);s=ut(M,l[5]),M.forEach(k),W.forEach(k),o=cr(g),w=G(g,"DIV",{class:!0});var R=q(w);x&&x.l(R),R.forEach(k),g.forEach(k),this.h()},h(){Y(h,"class","select-none fa-solid"),C(h,"fa-info",l[4]==="info"),C(h,"fa-circle-exclamation",l[4]==="error"),C(h,"fa-triangle-exclamation",l[4]==="warning"),Y(a,"class","select-none"),Y(w,"class","flex-none"),Y(c,"class","alert my-0.5 cursor-pointer"),C(c,"alert-info",l[4]==="info"),C(c,"alert-error",l[4]==="error"),C(c,"alert-warning",l[4]==="warning")},m(m,g){v(m,c,g),P(c,h),P(c,p),P(c,a),P(a,y),P(y,s),P(c,o),P(c,w),x&&x.m(w,null),B=!0,F||($=Sr(c,"click",kr(l[8])),F=!0)},p(m,[g]){(!B||g&16)&&C(h,"fa-info",m[4]==="info"),(!B||g&16)&&C(h,"fa-circle-exclamation",m[4]==="error"),(!B||g&16)&&C(h,"fa-triangle-exclamation",m[4]==="warning"),(!B||g&32)&&ct(s,m[5]),m[6]?x?x.p(m,g):(x=Tr(m),x.c(),x.m(w,null)):x&&(x.d(1),x=null),(!B||g&16)&&C(c,"alert-info",m[4]==="info"),(!B||g&16)&&C(c,"alert-error",m[4]==="error"),(!B||g&16)&&C(c,"alert-warning",m[4]==="warning")},i(m){B||(ft(()=>{E||(E=Ar(c,br,{},!0)),E.run(1)}),B=!0)},o(m){E||(E=Ar(c,br,{},!1)),E.run(0),B=!1},d(m){m&&k(c),x&&x.d(),m&&E&&E.end(),F=!1,$()}}}function Rt(l,c,h){let p,a=Q,y=()=>(a(),a=ir(x,R=>h(4,p=R)),x),s,o=Q,w=()=>(o(),o=ir(m,R=>h(5,s=R)),m),E,B=Q,F=()=>(B(),B=ir(g,R=>h(6,E=R)),g);l.$$.on_destroy.push(()=>a()),l.$$.on_destroy.push(()=>o()),l.$$.on_destroy.push(()=>B());let{dispatchedAlert:$}=c,x,m,g;const W=()=>$.close(),M=()=>$.click();return l.$$set=R=>{"dispatchedAlert"in R&&h(0,$=R.dispatchedAlert)},l.$$.update=()=>{l.$$.dirty&1&&y(h(1,x=$.type)),l.$$.dirty&1&&w(h(2,m=$.text)),l.$$.dirty&1&&F(h(3,g=$.closeable))},[$,x,m,g,p,s,E,W,M]}class Ct extends fr{constructor(c){super(),sr(this,c,Rt,Tt,lr,{dispatchedAlert:0})}}function Rr(l,c,h){const p=l.slice();return p[1]=c[h],p}function Cr(l){let c,h;return c=new Ct({props:{dispatchedAlert:l[1]}}),{c(){Lr(c.$$.fragment)},l(p){Nr(c.$$.fragment,p)},m(p,a){Mr(c,p,a),h=!0},p(p,a){const y={};a&1&&(y.dispatchedAlert=p[1]),c.$set(y)},i(p){h||(J(c.$$.fragment,p),h=!0)},o(p){K(c.$$.fragment,p),h=!1},d(p){Dr(c,p)}}}function St(l){let c,h,p=l[0],a=[];for(let s=0;s<p.length;s+=1)a[s]=Cr(Rr(l,p,s));const y=s=>K(a[s],1,1,()=>{a[s]=null});return{c(){c=O("div");for(let s=0;s<a.length;s+=1)a[s].c();this.h()},l(s){c=G(s,"DIV",{class:!0});var o=q(c);for(let w=0;w<a.length;w+=1)a[w].l(o);o.forEach(k),this.h()},h(){Y(c,"class","absolute top-0 right-0 h-full max-w-full flex flex-col overflow-x-auto z-40")},m(s,o){v(s,c,o);for(let w=0;w<a.length;w+=1)a[w].m(c,null);h=!0},p(s,[o]){if(o&1){p=s[0];let w;for(w=0;w<p.length;w+=1){const E=Rr(s,p,w);a[w]?(a[w].p(E,o),J(a[w],1)):(a[w]=Cr(E),a[w].c(),J(a[w],1),a[w].m(c,null))}for(lt(),w=p.length;w<a.length;w+=1)y(w);ht()}},i(s){if(!h){for(let o=0;o<p.length;o+=1)J(a[o]);h=!0}},o(s){a=a.filter(Boolean);for(let o=0;o<a.length;o+=1)K(a[o]);h=!1},d(s){s&&k(c),at(a,s)}}}function kt(l,c,h){let p;return pt(l,Bt,a=>h(0,p=a)),[p]}class Lt extends fr{constructor(c){super(),sr(this,c,kt,St,lr,{})}}function Nt(l){let c,h,p;const a=l[1].default,y=yt(a,l,l[0],null);return h=new Lt({}),{c(){y&&y.c(),c=ur(),Lr(h.$$.fragment)},l(s){y&&y.l(s),c=cr(s),Nr(h.$$.fragment,s)},m(s,o){y&&y.m(s,o),v(s,c,o),Mr(h,s,o),p=!0},p(s,[o]){y&&y.p&&(!p||o&1)&&wt(y,a,s,s[0],p?xt(a,s[0],o,null):dt(s[0]),null)},i(s){p||(J(y,s),J(h.$$.fragment,s),p=!0)},o(s){K(y,s),K(h.$$.fragment,s),p=!1},d(s){y&&y.d(s),s&&k(c),Dr(h,s)}}}function Mt(l,c,h){let{$$slots:p={},$$scope:a}=c;return Ur(async()=>{await $r.ready(),console.log("database driver:",$r.driver())}),Ur(mt),l.$$set=y=>{"$$scope"in y&&h(0,a=y.$$scope)},[a,p]}class qt extends fr{constructor(c){super(),sr(this,c,Mt,Nt,lr,{})}}export{qt as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
