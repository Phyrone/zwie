import{S as rt,i as it,s as ot,a as st,e as I,c as lt,b as J,g as W,t as A,d as Y,f as S,h as C,j as ct,o as Se,k as ft,l as ut,m as dt,n as $e,p as X,q as pt,r as _t,u as mt,v as F,w as M,x,y as B,z as G,A as _e}from"./chunks/index-3b672fbb.js";import{S as et,I as z,g as Ke,f as ze,a as ke,b as me,s as Z,i as We,c as oe,P as Ye,d as ht,e as gt,h as wt}from"./chunks/singletons-fb12cd40.js";import{_ as T}from"./chunks/preload-helper-41c905a7.js";function yt(r,e){return r==="/"||e==="ignore"?r:e==="never"?r.endsWith("/")?r.slice(0,-1):r:e==="always"&&!r.endsWith("/")?r+"/":r}function vt(r){return r.split("%25").map(decodeURI).join("%25")}function bt(r){for(const e in r)r[e]=decodeURIComponent(r[e]);return r}const Et=["href","pathname","search","searchParams","toString","toJSON"];function $t(r,e){const n=new URL(r);for(const i of Et){let a=n[i];Object.defineProperty(n,i,{get(){return e(),a},enumerable:!0,configurable:!0})}return kt(n),n}function kt(r){Object.defineProperty(r,"hash",{get(){throw new Error("Cannot access event.url.hash. Consider using `$page.url.hash` inside a component instead")}})}const Rt="/__data.json";function Lt(r){return r.replace(/\/$/,"")+Rt}function It(r){let e=5381;if(typeof r=="string"){let n=r.length;for(;n;)e=e*33^r.charCodeAt(--n)}else if(ArrayBuffer.isView(r)){const n=new Uint8Array(r.buffer,r.byteOffset,r.byteLength);let i=n.length;for(;i;)e=e*33^n[--i]}else throw new TypeError("value must be a string or TypedArray");return(e>>>0).toString(36)}const he=window.fetch;window.fetch=(r,e)=>((r instanceof Request?r.method:(e==null?void 0:e.method)||"GET")!=="GET"&&se.delete(Te(r)),he(r,e));const se=new Map;function At(r,e){const n=Te(r,e),i=document.querySelector(n);if(i!=null&&i.textContent){const{body:a,...p}=JSON.parse(i.textContent),t=i.getAttribute("data-ttl");return t&&se.set(n,{body:a,init:p,ttl:1e3*Number(t)}),Promise.resolve(new Response(a,p))}return he(r,e)}function St(r,e,n){if(se.size>0){const i=Te(r,n),a=se.get(i);if(a){if(performance.now()<a.ttl&&["default","force-cache","only-if-cached",void 0].includes(n==null?void 0:n.cache))return new Response(a.body,a.init);se.delete(i)}}return he(e,n)}function Te(r,e){let i=`script[data-sveltekit-fetched][data-url=${JSON.stringify(r instanceof Request?r.url:r)}]`;return e!=null&&e.body&&(typeof e.body=="string"||ArrayBuffer.isView(e.body))&&(i+=`[data-hash="${It(e.body)}"]`),i}const Ot=/^(\[)?(\.\.\.)?(\w+)(?:=(\w+))?(\])?$/;function Pt(r){const e=[];return{pattern:r==="/"?/^\/$/:new RegExp(`^${Dt(r).map(i=>{const a=/^\[\.\.\.(\w+)(?:=(\w+))?\]$/.exec(i);if(a)return e.push({name:a[1],matcher:a[2],optional:!1,rest:!0,chained:!0}),"(?:/(.*))?";const p=/^\[\[(\w+)(?:=(\w+))?\]\]$/.exec(i);if(p)return e.push({name:p[1],matcher:p[2],optional:!0,rest:!1,chained:!0}),"(?:/([^/]+))?";if(!i)return;const t=i.split(/\[(.+?)\](?!\])/);return"/"+t.map((s,d)=>{if(d%2){if(s.startsWith("x+"))return Re(String.fromCharCode(parseInt(s.slice(2),16)));if(s.startsWith("u+"))return Re(String.fromCharCode(...s.slice(2).split("-").map(O=>parseInt(O,16))));const g=Ot.exec(s);if(!g)throw new Error(`Invalid param: ${s}. Params and matcher names can only have underscores and alphanumeric characters.`);const[,v,V,q,$]=g;return e.push({name:q,matcher:$,optional:!!v,rest:!!V,chained:V?d===1&&t[0]==="":!1}),V?"(.*?)":v?"([^/]*)?":"([^/]+?)"}return Re(s)}).join("")}).join("")}/?$`),params:e}}function Tt(r){return!/^\([^)]+\)$/.test(r)}function Dt(r){return r.slice(1).split("/").filter(Tt)}function Nt(r,e,n){const i={},a=r.slice(1);let p="";for(let t=0;t<e.length;t+=1){const c=e[t];let s=a[t];if(c.chained&&c.rest&&p&&(s=s?p+"/"+s:p),p="",s===void 0)c.rest&&(i[c.name]="");else{if(c.matcher&&!n[c.matcher](s)){if(c.optional&&c.chained){let d=a.indexOf(void 0,t);if(d===-1){const g=e[t+1];if(g!=null&&g.rest&&g.chained)p=s;else return}for(;d>=t;)a[d]=a[d-1],d-=1;continue}return}i[c.name]=s}}if(!p)return i}function Re(r){return r.normalize().replace(/[[\]]/g,"\\$&").replace(/%/g,"%25").replace(/\//g,"%2[Ff]").replace(/\?/g,"%3[Ff]").replace(/#/g,"%23").replace(/[.*+?^${}()|\\]/g,"\\$&")}function Ut(r,e,n,i){const a=new Set(e);return Object.entries(n).map(([c,[s,d,g]])=>{const{pattern:v,params:V}=Pt(c),q={id:c,exec:$=>{const O=v.exec($);if(O)return Nt(O,V,i)},errors:[1,...g||[]].map($=>r[$]),layouts:[0,...d||[]].map(t),leaf:p(s)};return q.errors.length=q.layouts.length=Math.max(q.errors.length,q.layouts.length),q});function p(c){const s=c<0;return s&&(c=~c),[s,r[c]]}function t(c){return c===void 0?c:[a.has(c),r[c]]}}function Vt(r){let e,n,i;var a=r[0][0];function p(t){return{props:{data:t[2],form:t[1]}}}return a&&(e=F(a,p(r))),{c(){e&&M(e.$$.fragment),n=I()},l(t){e&&x(e.$$.fragment,t),n=I()},m(t,c){e&&B(e,t,c),J(t,n,c),i=!0},p(t,c){const s={};if(c&4&&(s.data=t[2]),c&2&&(s.form=t[1]),a!==(a=t[0][0])){if(e){W();const d=e;A(d.$$.fragment,1,0,()=>{G(d,1)}),Y()}a?(e=F(a,p(t)),M(e.$$.fragment),S(e.$$.fragment,1),B(e,n.parentNode,n)):e=null}else a&&e.$set(s)},i(t){i||(e&&S(e.$$.fragment,t),i=!0)},o(t){e&&A(e.$$.fragment,t),i=!1},d(t){t&&C(n),e&&G(e,t)}}}function jt(r){let e,n,i;var a=r[0][0];function p(t){return{props:{data:t[2],$$slots:{default:[Ht]},$$scope:{ctx:t}}}}return a&&(e=F(a,p(r))),{c(){e&&M(e.$$.fragment),n=I()},l(t){e&&x(e.$$.fragment,t),n=I()},m(t,c){e&&B(e,t,c),J(t,n,c),i=!0},p(t,c){const s={};if(c&4&&(s.data=t[2]),c&2107&&(s.$$scope={dirty:c,ctx:t}),a!==(a=t[0][0])){if(e){W();const d=e;A(d.$$.fragment,1,0,()=>{G(d,1)}),Y()}a?(e=F(a,p(t)),M(e.$$.fragment),S(e.$$.fragment,1),B(e,n.parentNode,n)):e=null}else a&&e.$set(s)},i(t){i||(e&&S(e.$$.fragment,t),i=!0)},o(t){e&&A(e.$$.fragment,t),i=!1},d(t){t&&C(n),e&&G(e,t)}}}function qt(r){let e,n,i;var a=r[0][1];function p(t){return{props:{data:t[3],form:t[1]}}}return a&&(e=F(a,p(r))),{c(){e&&M(e.$$.fragment),n=I()},l(t){e&&x(e.$$.fragment,t),n=I()},m(t,c){e&&B(e,t,c),J(t,n,c),i=!0},p(t,c){const s={};if(c&8&&(s.data=t[3]),c&2&&(s.form=t[1]),a!==(a=t[0][1])){if(e){W();const d=e;A(d.$$.fragment,1,0,()=>{G(d,1)}),Y()}a?(e=F(a,p(t)),M(e.$$.fragment),S(e.$$.fragment,1),B(e,n.parentNode,n)):e=null}else a&&e.$set(s)},i(t){i||(e&&S(e.$$.fragment,t),i=!0)},o(t){e&&A(e.$$.fragment,t),i=!1},d(t){t&&C(n),e&&G(e,t)}}}function Ct(r){let e,n,i;var a=r[0][1];function p(t){return{props:{data:t[3],$$slots:{default:[Gt]},$$scope:{ctx:t}}}}return a&&(e=F(a,p(r))),{c(){e&&M(e.$$.fragment),n=I()},l(t){e&&x(e.$$.fragment,t),n=I()},m(t,c){e&&B(e,t,c),J(t,n,c),i=!0},p(t,c){const s={};if(c&8&&(s.data=t[3]),c&2099&&(s.$$scope={dirty:c,ctx:t}),a!==(a=t[0][1])){if(e){W();const d=e;A(d.$$.fragment,1,0,()=>{G(d,1)}),Y()}a?(e=F(a,p(t)),M(e.$$.fragment),S(e.$$.fragment,1),B(e,n.parentNode,n)):e=null}else a&&e.$set(s)},i(t){i||(e&&S(e.$$.fragment,t),i=!0)},o(t){e&&A(e.$$.fragment,t),i=!1},d(t){t&&C(n),e&&G(e,t)}}}function Ft(r){let e,n,i;var a=r[0][2];function p(t){return{props:{data:t[4],form:t[1]}}}return a&&(e=F(a,p(r))),{c(){e&&M(e.$$.fragment),n=I()},l(t){e&&x(e.$$.fragment,t),n=I()},m(t,c){e&&B(e,t,c),J(t,n,c),i=!0},p(t,c){const s={};if(c&16&&(s.data=t[4]),c&2&&(s.form=t[1]),a!==(a=t[0][2])){if(e){W();const d=e;A(d.$$.fragment,1,0,()=>{G(d,1)}),Y()}a?(e=F(a,p(t)),M(e.$$.fragment),S(e.$$.fragment,1),B(e,n.parentNode,n)):e=null}else a&&e.$set(s)},i(t){i||(e&&S(e.$$.fragment,t),i=!0)},o(t){e&&A(e.$$.fragment,t),i=!1},d(t){t&&C(n),e&&G(e,t)}}}function Mt(r){let e,n,i;var a=r[0][2];function p(t){return{props:{data:t[4],$$slots:{default:[Bt]},$$scope:{ctx:t}}}}return a&&(e=F(a,p(r))),{c(){e&&M(e.$$.fragment),n=I()},l(t){e&&x(e.$$.fragment,t),n=I()},m(t,c){e&&B(e,t,c),J(t,n,c),i=!0},p(t,c){const s={};if(c&16&&(s.data=t[4]),c&2083&&(s.$$scope={dirty:c,ctx:t}),a!==(a=t[0][2])){if(e){W();const d=e;A(d.$$.fragment,1,0,()=>{G(d,1)}),Y()}a?(e=F(a,p(t)),M(e.$$.fragment),S(e.$$.fragment,1),B(e,n.parentNode,n)):e=null}else a&&e.$set(s)},i(t){i||(e&&S(e.$$.fragment,t),i=!0)},o(t){e&&A(e.$$.fragment,t),i=!1},d(t){t&&C(n),e&&G(e,t)}}}function Bt(r){let e,n,i;var a=r[0][3];function p(t){return{props:{data:t[5],form:t[1]}}}return a&&(e=F(a,p(r))),{c(){e&&M(e.$$.fragment),n=I()},l(t){e&&x(e.$$.fragment,t),n=I()},m(t,c){e&&B(e,t,c),J(t,n,c),i=!0},p(t,c){const s={};if(c&32&&(s.data=t[5]),c&2&&(s.form=t[1]),a!==(a=t[0][3])){if(e){W();const d=e;A(d.$$.fragment,1,0,()=>{G(d,1)}),Y()}a?(e=F(a,p(t)),M(e.$$.fragment),S(e.$$.fragment,1),B(e,n.parentNode,n)):e=null}else a&&e.$set(s)},i(t){i||(e&&S(e.$$.fragment,t),i=!0)},o(t){e&&A(e.$$.fragment,t),i=!1},d(t){t&&C(n),e&&G(e,t)}}}function Gt(r){let e,n,i,a;const p=[Mt,Ft],t=[];function c(s,d){return s[0][3]?0:1}return e=c(r),n=t[e]=p[e](r),{c(){n.c(),i=I()},l(s){n.l(s),i=I()},m(s,d){t[e].m(s,d),J(s,i,d),a=!0},p(s,d){let g=e;e=c(s),e===g?t[e].p(s,d):(W(),A(t[g],1,1,()=>{t[g]=null}),Y(),n=t[e],n?n.p(s,d):(n=t[e]=p[e](s),n.c()),S(n,1),n.m(i.parentNode,i))},i(s){a||(S(n),a=!0)},o(s){A(n),a=!1},d(s){t[e].d(s),s&&C(i)}}}function Ht(r){let e,n,i,a;const p=[Ct,qt],t=[];function c(s,d){return s[0][2]?0:1}return e=c(r),n=t[e]=p[e](r),{c(){n.c(),i=I()},l(s){n.l(s),i=I()},m(s,d){t[e].m(s,d),J(s,i,d),a=!0},p(s,d){let g=e;e=c(s),e===g?t[e].p(s,d):(W(),A(t[g],1,1,()=>{t[g]=null}),Y(),n=t[e],n?n.p(s,d):(n=t[e]=p[e](s),n.c()),S(n,1),n.m(i.parentNode,i))},i(s){a||(S(n),a=!0)},o(s){A(n),a=!1},d(s){t[e].d(s),s&&C(i)}}}function Xe(r){let e,n=r[7]&&Ze(r);return{c(){e=ft("div"),n&&n.c(),this.h()},l(i){e=ut(i,"DIV",{id:!0,"aria-live":!0,"aria-atomic":!0,style:!0});var a=dt(e);n&&n.l(a),a.forEach(C),this.h()},h(){$e(e,"id","svelte-announcer"),$e(e,"aria-live","assertive"),$e(e,"aria-atomic","true"),X(e,"position","absolute"),X(e,"left","0"),X(e,"top","0"),X(e,"clip","rect(0 0 0 0)"),X(e,"clip-path","inset(50%)"),X(e,"overflow","hidden"),X(e,"white-space","nowrap"),X(e,"width","1px"),X(e,"height","1px")},m(i,a){J(i,e,a),n&&n.m(e,null)},p(i,a){i[7]?n?n.p(i,a):(n=Ze(i),n.c(),n.m(e,null)):n&&(n.d(1),n=null)},d(i){i&&C(e),n&&n.d()}}}function Ze(r){let e;return{c(){e=pt(r[8])},l(n){e=_t(n,r[8])},m(n,i){J(n,e,i)},p(n,i){i&256&&mt(e,n[8])},d(n){n&&C(e)}}}function Jt(r){let e,n,i,a,p;const t=[jt,Vt],c=[];function s(g,v){return g[0][1]?0:1}e=s(r),n=c[e]=t[e](r);let d=r[6]&&Xe(r);return{c(){n.c(),i=st(),d&&d.c(),a=I()},l(g){n.l(g),i=lt(g),d&&d.l(g),a=I()},m(g,v){c[e].m(g,v),J(g,i,v),d&&d.m(g,v),J(g,a,v),p=!0},p(g,[v]){let V=e;e=s(g),e===V?c[e].p(g,v):(W(),A(c[V],1,1,()=>{c[V]=null}),Y(),n=c[e],n?n.p(g,v):(n=c[e]=t[e](g),n.c()),S(n,1),n.m(i.parentNode,i)),g[6]?d?d.p(g,v):(d=Xe(g),d.c(),d.m(a.parentNode,a)):d&&(d.d(1),d=null)},i(g){p||(S(n),p=!0)},o(g){A(n),p=!1},d(g){c[e].d(g),g&&C(i),d&&d.d(g),g&&C(a)}}}function Kt(r,e,n){let{stores:i}=e,{page:a}=e,{components:p}=e,{form:t}=e,{data_0:c=null}=e,{data_1:s=null}=e,{data_2:d=null}=e,{data_3:g=null}=e;ct(i.page.notify);let v=!1,V=!1,q=null;return Se(()=>{const $=i.page.subscribe(()=>{v&&(n(7,V=!0),n(8,q=document.title||"untitled page"))});return n(6,v=!0),$}),r.$$set=$=>{"stores"in $&&n(9,i=$.stores),"page"in $&&n(10,a=$.page),"components"in $&&n(0,p=$.components),"form"in $&&n(1,t=$.form),"data_0"in $&&n(2,c=$.data_0),"data_1"in $&&n(3,s=$.data_1),"data_2"in $&&n(4,d=$.data_2),"data_3"in $&&n(5,g=$.data_3)},r.$$.update=()=>{r.$$.dirty&1536&&i.page.set(a)},[p,t,c,s,d,g,v,V,q,i,a]}class zt extends rt{constructor(e){super(),it(this,e,Kt,Jt,ot,{stores:9,page:10,components:0,form:1,data_0:2,data_1:3,data_2:4,data_3:5})}}const Wt={},ge=[()=>T(()=>import("./chunks/0-dba24ee1.js"),["./chunks/0-dba24ee1.js","./chunks/_layout-b00c1660.js","./components/pages/_layout.svelte-79f2dbdf.js","./chunks/index-3b672fbb.js","./chunks/alerts-d6284e64.js","./chunks/index-b585bed5.js","./chunks/update-e75f62cf.js","./chunks/sweetalert2.all-b59b2082.js","./chunks/_commonjsHelpers-edff4021.js","./chunks/theme-selector-bbacf5b5.js","./chunks/localforage-e8653f69.js","./assets/_layout-bc435ffc.css"],import.meta.url),()=>T(()=>import("./chunks/1-4e856669.js"),["./chunks/1-4e856669.js","./components/error.svelte-18155622.js","./chunks/index-3b672fbb.js","./chunks/singletons-fb12cd40.js","./chunks/index-b585bed5.js"],import.meta.url),()=>T(()=>import("./chunks/2-93106e9c.js"),["./chunks/2-93106e9c.js","./components/pages/(main)/_layout.svelte-2a4e03cd.js","./chunks/index-3b672fbb.js","./chunks/Icon-a754690e.js","./chunks/update-e75f62cf.js","./chunks/index-b585bed5.js","./chunks/sweetalert2.all-b59b2082.js","./chunks/_commonjsHelpers-edff4021.js","./chunks/alerts-d6284e64.js","./chunks/localforage-e8653f69.js"],import.meta.url),()=>T(()=>import("./chunks/3-d7ab1036.js"),["./chunks/3-d7ab1036.js","./components/pages/(main)/plugins/_layout.svelte-dd23162b.js","./chunks/index-3b672fbb.js"],import.meta.url),()=>T(()=>import("./chunks/4-d07c6912.js"),["./chunks/4-d07c6912.js","./components/pages/(main)/server/_server_/_layout.svelte-b8e92903.js","./chunks/index-3b672fbb.js","./chunks/Icon-a754690e.js"],import.meta.url),()=>T(()=>import("./chunks/5-7644cdfc.js"),["./chunks/5-7644cdfc.js","./components/pages/(main)/settings/_layout.svelte-3ec9e764.js","./chunks/index-3b672fbb.js"],import.meta.url),()=>T(()=>import("./chunks/6-a2fafacc.js"),["./chunks/6-a2fafacc.js","./components/pages/(main)/toolbox/_layout.svelte-997bc535.js","./chunks/index-3b672fbb.js"],import.meta.url),()=>T(()=>import("./chunks/7-4fddeebf.js"),["./chunks/7-4fddeebf.js","./chunks/_page-da46b06b.js","./components/pages/(main)/_page.svelte-95664ef8.js","./chunks/index-3b672fbb.js","./chunks/sweetalert2.all-b59b2082.js","./chunks/_commonjsHelpers-edff4021.js","./chunks/alerts-d6284e64.js","./chunks/index-b585bed5.js"],import.meta.url),()=>T(()=>import("./chunks/8-8beca359.js"),["./chunks/8-8beca359.js","./components/pages/(main)/dm/_page.svelte-6ede0a1d.js","./chunks/index-3b672fbb.js"],import.meta.url),()=>T(()=>import("./chunks/9-958c9a86.js"),["./chunks/9-958c9a86.js","./components/pages/(main)/plugins/_page.svelte-6ede0a1d.js","./chunks/index-3b672fbb.js"],import.meta.url),()=>T(()=>import("./chunks/10-534a0a81.js"),["./chunks/10-534a0a81.js","./components/pages/(main)/profile/_page.svelte-8812149d.js","./chunks/preload-helper-41c905a7.js","./chunks/index-3b672fbb.js","./chunks/sweetalert2.all-b59b2082.js","./chunks/_commonjsHelpers-edff4021.js"],import.meta.url),()=>T(()=>import("./chunks/11-23a952fb.js"),["./chunks/11-23a952fb.js","./components/pages/(main)/server/_server_/_page.svelte-2f1590cf.js","./chunks/index-3b672fbb.js"],import.meta.url),()=>T(()=>import("./chunks/12-823e6bdf.js"),["./chunks/12-823e6bdf.js","./components/pages/(main)/server/_server_/channel/_channel_/_page.svelte-5dcbb1a8.js","./chunks/index-3b672fbb.js"],import.meta.url),()=>T(()=>import("./chunks/13-99f60c66.js"),["./chunks/13-99f60c66.js","./components/pages/(main)/settings/_page.svelte-6ede0a1d.js","./chunks/index-3b672fbb.js"],import.meta.url),()=>T(()=>import("./chunks/14-60999bd4.js"),["./chunks/14-60999bd4.js","./components/pages/(main)/settings/audio/_page.svelte-f15c35ea.js","./chunks/index-3b672fbb.js","./assets/_page-91244bf2.css"],import.meta.url),()=>T(()=>import("./chunks/15-b9f71fde.js"),["./chunks/15-b9f71fde.js","./components/pages/(main)/settings/language/_page.svelte-f5add03c.js","./chunks/index-3b672fbb.js"],import.meta.url),()=>T(()=>import("./chunks/16-bfa7b1a8.js"),["./chunks/16-bfa7b1a8.js","./components/pages/(main)/settings/overlay/_page.svelte-2d39a5d3.js","./chunks/index-3b672fbb.js","./chunks/theme-selector-bbacf5b5.js","./chunks/index-b585bed5.js","./chunks/localforage-e8653f69.js","./chunks/_commonjsHelpers-edff4021.js"],import.meta.url),()=>T(()=>import("./chunks/17-5536941f.js"),["./chunks/17-5536941f.js","./components/pages/(main)/settings/video/_page.svelte-086f3e92.js","./chunks/index-3b672fbb.js"],import.meta.url),()=>T(()=>import("./chunks/18-bfbe0aa7.js"),["./chunks/18-bfbe0aa7.js","./components/pages/(main)/toolbox/_page.svelte-6ede0a1d.js","./chunks/index-3b672fbb.js"],import.meta.url)],tt=[],Yt={"/(main)":[7,[2]],"/(main)/dm":[8,[2]],"/(main)/plugins":[9,[2,3]],"/(main)/profile":[10,[2]],"/(main)/server/[server]":[11,[2,4]],"/(main)/server/[server]/channel/[channel]":[12,[2,4]],"/(main)/settings":[13,[2,5]],"/(main)/settings/audio":[14,[2,5]],"/(main)/settings/language":[15,[2,5]],"/(main)/settings/overlay":[16,[2,5]],"/(main)/settings/video":[17,[2,5]],"/(main)/toolbox":[18,[2,6]]},Xt={handleError:({error:r})=>{console.error(r)}};let Oe=class{constructor(e,n){this.status=e,typeof n=="string"?this.body={message:n}:n?this.body=n:this.body={message:`Error: ${e}`}}toString(){return JSON.stringify(this.body)}},Qe=class{constructor(e,n){this.status=e,this.location=n}};async function Zt(r){var e;for(const n in r)if(typeof((e=r[n])==null?void 0:e.then)=="function")return Object.fromEntries(await Promise.all(Object.entries(r).map(async([i,a])=>[i,await a])));return r}Object.getOwnPropertyNames(Object.prototype).sort().join("\0");const Qt=-1,xt=-2,en=-3,tn=-4,nn=-5,an=-6;function rn(r){if(typeof r=="number")return i(r,!0);if(!Array.isArray(r)||r.length===0)throw new Error("Invalid input");const e=r,n=Array(e.length);function i(a,p=!1){if(a===Qt)return;if(a===en)return NaN;if(a===tn)return 1/0;if(a===nn)return-1/0;if(a===an)return-0;if(p)throw new Error("Invalid input");if(a in n)return n[a];const t=e[a];if(!t||typeof t!="object")n[a]=t;else if(Array.isArray(t))if(typeof t[0]=="string")switch(t[0]){case"Date":n[a]=new Date(t[1]);break;case"Set":const s=new Set;n[a]=s;for(let v=1;v<t.length;v+=1)s.add(i(t[v]));break;case"Map":const d=new Map;n[a]=d;for(let v=1;v<t.length;v+=2)d.set(i(t[v]),i(t[v+1]));break;case"RegExp":n[a]=new RegExp(t[1],t[2]);break;case"Object":n[a]=Object(t[1]);break;case"BigInt":n[a]=BigInt(t[1]);break;case"null":const g=Object.create(null);n[a]=g;for(let v=1;v<t.length;v+=2)g[t[v]]=i(t[v+1]);break}else{const c=new Array(t.length);n[a]=c;for(let s=0;s<t.length;s+=1){const d=t[s];d!==xt&&(c[s]=i(d))}}else{const c={};n[a]=c;for(const s in t){const d=t[s];c[s]=i(d)}}return n[a]}return i(0)}function on(r){return r.filter(e=>e!=null)}const Le=Ut(ge,tt,Yt,Wt),nt=ge[0],Pe=ge[1];nt();Pe();let ne={};try{ne=JSON.parse(sessionStorage[et])}catch{}function Ie(r){ne[r]=oe()}function sn({target:r,base:e}){var Ge;const n=document.documentElement,i=[];let a=null;const p={before_navigate:[],after_navigate:[]};let t={branch:[],error:null,url:null},c=!1,s=!1,d=!0,g=!1,v=!1,V=!1,q=!1,$,O=(Ge=history.state)==null?void 0:Ge[z];O||(O=Date.now(),history.replaceState({...history.state,[z]:O},"",location.href));const we=ne[O];we&&(history.scrollRestoration="manual",scrollTo(we.x,we.y));let Q,De,le;async function Ne(){le=le||Promise.resolve(),await le,le=null;const o=new URL(location.href),l=ue(o,!0);a=null,await Ve(l,o,[])}async function ye(o,{noScroll:l=!1,replaceState:u=!1,keepFocus:f=!1,state:m={},invalidateAll:_=!1},h,b){return typeof o=="string"&&(o=new URL(o,Ke(document))),pe({url:o,scroll:l?oe():null,keepfocus:f,redirect_chain:h,details:{state:m,replaceState:u},nav_token:b,accepted:()=>{_&&(q=!0)},blocked:()=>{},type:"goto"})}async function Ue(o){const l=ue(o,!1);if(!l)throw new Error(`Attempted to preload a URL that does not belong to this app: ${o}`);return a={id:l.id,promise:Ce(l).then(u=>(u.type==="loaded"&&u.state.error&&(a=null),u))},a.promise}async function ce(...o){const u=Le.filter(f=>o.some(m=>f.exec(m))).map(f=>Promise.all([...f.layouts,f.leaf].map(m=>m==null?void 0:m[1]())));await Promise.all(u)}async function Ve(o,l,u,f,m={},_){var b,y;De=m;let h=o&&await Ce(o);if(h||(h=await Be(l,{id:null},await ie(new Error(`Not found: ${l.pathname}`),{url:l,params:{},route:{id:null}}),404)),l=(o==null?void 0:o.url)||l,De!==m)return!1;if(h.type==="redirect")if(u.length>10||u.includes(l.pathname))h=await fe({status:500,error:await ie(new Error("Redirect loop"),{url:l,params:{},route:{id:null}}),url:l,route:{id:null}});else return ye(new URL(h.location,l).href,{},[...u,l.pathname],m),!1;else((y=(b=h.props)==null?void 0:b.page)==null?void 0:y.status)>=400&&await Z.updated.check()&&await re(l);if(i.length=0,q=!1,g=!0,f&&f.details){const{details:w}=f,k=w.replaceState?0:1;w.state[z]=O+=k,history[w.replaceState?"replaceState":"pushState"](w.state,"",l)}if(a=null,s?(t=h.state,h.props.page&&(h.props.page.url=l),$.$set(h.props)):je(h),f){const{scroll:w,keepfocus:k}=f,{activeElement:N}=document;await _e();const K=document.activeElement!==N&&document.activeElement!==document.body;if(!k&&!K&&await Ae(),d){const L=l.hash&&document.getElementById(l.hash.slice(1));w?scrollTo(w.x,w.y):L?L.scrollIntoView():scrollTo(0,0)}}else await _e();d=!0,h.props.page&&(Q=h.props.page),_&&_(),g=!1}function je(o){var f;t=o.state;const l=document.querySelector("style[data-sveltekit]");l&&l.remove(),Q=o.props.page,$=new zt({target:r,props:{...o.props,stores:Z},hydrate:!0});const u={from:null,to:{params:t.params,route:{id:((f=t.route)==null?void 0:f.id)??null},url:new URL(location.href)},willUnload:!1,type:"enter"};p.after_navigate.forEach(m=>m(u)),s=!0}async function ae({url:o,params:l,branch:u,status:f,error:m,route:_,form:h}){let b="never";for(const L of u)(L==null?void 0:L.slash)!==void 0&&(b=L.slash);o.pathname=yt(o.pathname,b),o.search=o.search;const y={type:"loaded",state:{url:o,params:l,branch:u,error:m,route:_},props:{components:on(u).map(L=>L.node.component)}};h!==void 0&&(y.props.form=h);let w={},k=!Q,N=0;for(let L=0;L<Math.max(u.length,t.branch.length);L+=1){const E=u[L],U=t.branch[L];(E==null?void 0:E.data)!==(U==null?void 0:U.data)&&(k=!0),E&&(w={...w,...E.data},k&&(y.props[`data_${N}`]=w),N+=1)}return(!t.url||o.href!==t.url.href||t.error!==m||h!==void 0&&h!==Q.form||k)&&(y.props.page={error:m,params:l,route:{id:(_==null?void 0:_.id)??null},status:f,url:new URL(o),form:h??null,data:k?w:Q.data}),y}async function ve({loader:o,parent:l,url:u,params:f,route:m,server_data_node:_}){var w,k,N;let h=null;const b={dependencies:new Set,params:new Set,parent:!1,route:!1,url:!1},y=await o();if((w=y.universal)!=null&&w.load){let K=function(...E){for(const U of E){const{href:H}=new URL(U,u);b.dependencies.add(H)}};const L={route:{get id(){return b.route=!0,m.id}},params:new Proxy(f,{get:(E,U)=>(b.params.add(U),E[U])}),data:(_==null?void 0:_.data)??null,url:$t(u,()=>{b.url=!0}),async fetch(E,U){let H;E instanceof Request?(H=E.url,U={body:E.method==="GET"||E.method==="HEAD"?void 0:await E.blob(),cache:E.cache,credentials:E.credentials,headers:E.headers,integrity:E.integrity,keepalive:E.keepalive,method:E.method,mode:E.mode,redirect:E.redirect,referrer:E.referrer,referrerPolicy:E.referrerPolicy,signal:E.signal,...U}):H=E;const R=new URL(H,u).href;return K(R),s?St(H,R,U):At(H,U)},setHeaders:()=>{},depends:K,parent(){return b.parent=!0,l()}};h=await y.universal.load.call(null,L)??null,h=h?await Zt(h):null}return{node:y,loader:o,server:_,universal:(k=y.universal)!=null&&k.load?{type:"data",data:h,uses:b}:null,data:h??(_==null?void 0:_.data)??null,slash:((N=y.universal)==null?void 0:N.trailingSlash)??(_==null?void 0:_.slash)}}function qe(o,l,u,f,m){if(q)return!0;if(!f)return!1;if(f.parent&&o||f.route&&l||f.url&&u)return!0;for(const _ of f.params)if(m[_]!==t.params[_])return!0;for(const _ of f.dependencies)if(i.some(h=>h(new URL(_))))return!0;return!1}function be(o,l){return(o==null?void 0:o.type)==="data"?{type:"data",data:o.data,uses:{dependencies:new Set(o.uses.dependencies??[]),params:new Set(o.uses.params??[]),parent:!!o.uses.parent,route:!!o.uses.route,url:!!o.uses.url},slash:o.slash}:(o==null?void 0:o.type)==="skip"?l??null:null}async function Ce({id:o,invalidating:l,url:u,params:f,route:m}){if((a==null?void 0:a.id)===o)return a.promise;const{errors:_,layouts:h,leaf:b}=m,y=[...h,b];_.forEach(R=>R==null?void 0:R().catch(()=>{})),y.forEach(R=>R==null?void 0:R[1]().catch(()=>{}));let w=null;const k=t.url?o!==t.url.pathname+t.url.search:!1,N=t.route?m.id!==t.route.id:!1,K=y.reduce((R,D,j)=>{var te;const P=t.branch[j],ee=!!(D!=null&&D[0])&&((P==null?void 0:P.loader)!==D[1]||qe(R.some(Boolean),N,k,(te=P.server)==null?void 0:te.uses,f));return R.push(ee),R},[]);if(K.some(Boolean)){try{w=await xe(u,K)}catch(R){return fe({status:500,error:await ie(R,{url:u,params:f,route:{id:m.id}}),url:u,route:m})}if(w.type==="redirect")return w}const L=w==null?void 0:w.nodes;let E=!1;const U=y.map(async(R,D)=>{var te;if(!R)return;const j=t.branch[D],P=L==null?void 0:L[D];if((!P||P.type==="skip")&&R[1]===(j==null?void 0:j.loader)&&!qe(E,N,k,(te=j.universal)==null?void 0:te.uses,f))return j;if(E=!0,(P==null?void 0:P.type)==="error")throw P;return ve({loader:R[1],url:u,params:f,route:m,parent:async()=>{var Je;const He={};for(let Ee=0;Ee<D;Ee+=1)Object.assign(He,(Je=await U[Ee])==null?void 0:Je.data);return He},server_data_node:be(P===void 0&&R[0]?{type:"skip"}:P??null,j==null?void 0:j.server)})});for(const R of U)R.catch(()=>{});const H=[];for(let R=0;R<y.length;R+=1)if(y[R])try{H.push(await U[R])}catch(D){if(D instanceof Qe)return{type:"redirect",location:D.location};let j=500,P;if(L!=null&&L.includes(D))j=D.status??j,P=D.error;else if(D instanceof Oe)j=D.status,P=D.body;else{if(await Z.updated.check())return await re(u);P=await ie(D,{params:f,url:u,route:{id:m.id}})}const ee=await Fe(R,H,_);return ee?await ae({url:u,params:f,branch:H.slice(0,ee.idx).concat(ee.node),status:j,error:P,route:m}):await Be(u,{id:m.id},P,j)}else H.push(void 0);return await ae({url:u,params:f,branch:H,status:200,error:null,route:m,form:l?void 0:null})}async function Fe(o,l,u){for(;o--;)if(u[o]){let f=o;for(;!l[f];)f-=1;try{return{idx:f+1,node:{node:await u[o](),loader:u[o],data:{},server:null,universal:null}}}catch{continue}}}async function fe({status:o,error:l,url:u,route:f}){const m={};let _=null;if(tt[0]===0)try{const w=await xe(u,[!0]);if(w.type!=="data"||w.nodes[0]&&w.nodes[0].type!=="data")throw 0;_=w.nodes[0]??null}catch{(u.origin!==location.origin||u.pathname!==location.pathname||c)&&await re(u)}const b=await ve({loader:nt,url:u,params:m,route:f,parent:()=>Promise.resolve({}),server_data_node:be(_)}),y={node:await Pe(),loader:Pe,universal:null,server:null,data:null};return await ae({url:u,params:m,branch:[b,y],status:o,error:l,route:null})}function ue(o,l){if(We(o,e))return;const u=de(o);for(const f of Le){const m=f.exec(u);if(m)return{id:o.pathname+o.search,invalidating:l,route:f,params:bt(m),url:o}}}function de(o){return vt(o.pathname.slice(e.length)||"/")}function Me({url:o,type:l,intent:u,delta:f}){var b,y;let m=!1;const _={from:{params:t.params,route:{id:((b=t.route)==null?void 0:b.id)??null},url:t.url},to:{params:(u==null?void 0:u.params)??null,route:{id:((y=u==null?void 0:u.route)==null?void 0:y.id)??null},url:o},willUnload:!u,type:l};f!==void 0&&(_.delta=f);const h={..._,cancel:()=>{m=!0}};return v||p.before_navigate.forEach(w=>w(h)),m?null:_}async function pe({url:o,scroll:l,keepfocus:u,redirect_chain:f,details:m,type:_,delta:h,nav_token:b,accepted:y,blocked:w}){const k=ue(o,!1),N=Me({url:o,type:_,delta:h,intent:k});if(!N){w();return}Ie(O),y(),v=!0,s&&Z.navigating.set(N),await Ve(k,o,f,{scroll:l,keepfocus:u,details:m},b,()=>{v=!1,p.after_navigate.forEach(K=>K(N)),Z.navigating.set(null)})}async function Be(o,l,u,f){return o.origin===location.origin&&o.pathname===location.pathname&&!c?await fe({status:f,error:u,url:o,route:l}):await re(o)}function re(o){return location.href=o.href,new Promise(()=>{})}function at(){let o;n.addEventListener("mousemove",_=>{const h=_.target;clearTimeout(o),o=setTimeout(()=>{f(h,2)},20)});function l(_){f(_.composedPath()[0],1)}n.addEventListener("mousedown",l),n.addEventListener("touchstart",l,{passive:!0});const u=new IntersectionObserver(_=>{for(const h of _)h.isIntersecting&&(ce(de(new URL(h.target.href))),u.unobserve(h.target))},{threshold:0});function f(_,h){const b=ze(_,n);if(!b)return;const{url:y,external:w}=ke(b,e);if(w)return;const k=me(b);k.reload||(h<=k.preload_data?Ue(y):h<=k.preload_code&&ce(de(y)))}function m(){u.disconnect();for(const _ of n.querySelectorAll("a")){const{url:h,external:b}=ke(_,e);if(b)continue;const y=me(_);y.reload||(y.preload_code===Ye.viewport&&u.observe(_),y.preload_code===Ye.eager&&ce(de(h)))}}p.after_navigate.push(m),m()}return{after_navigate:o=>{Se(()=>(p.after_navigate.push(o),()=>{const l=p.after_navigate.indexOf(o);p.after_navigate.splice(l,1)}))},before_navigate:o=>{Se(()=>(p.before_navigate.push(o),()=>{const l=p.before_navigate.indexOf(o);p.before_navigate.splice(l,1)}))},disable_scroll_handling:()=>{(g||!s)&&(d=!1)},goto:(o,l={})=>ye(o,l,[]),invalidate:o=>{if(typeof o=="function")i.push(o);else{const{href:l}=new URL(o,location.href);i.push(u=>u.href===l)}return Ne()},invalidateAll:()=>(q=!0,Ne()),preload_data:async o=>{const l=new URL(o,Ke(document));await Ue(l)},preload_code:ce,apply_action:async o=>{if(o.type==="error"){const l=new URL(location.href),{branch:u,route:f}=t;if(!f)return;const m=await Fe(t.branch.length,u,f.errors);if(m){const _=await ae({url:l,params:t.params,branch:u.slice(0,m.idx).concat(m.node),status:o.status??500,error:o.error,route:f});t=_.state,$.$set(_.props),_e().then(Ae)}}else if(o.type==="redirect")ye(o.location,{invalidateAll:!0},[]);else{const l={form:o.data,page:{...Q,form:o.data,status:o.status}};$.$set(l),o.type==="success"&&_e().then(Ae)}},_start_router:()=>{var o;history.scrollRestoration="manual",addEventListener("beforeunload",l=>{var f;let u=!1;if(!v){const m={from:{params:t.params,route:{id:((f=t.route)==null?void 0:f.id)??null},url:t.url},to:null,willUnload:!0,type:"leave",cancel:()=>u=!0};p.before_navigate.forEach(_=>_(m))}u?(l.preventDefault(),l.returnValue=""):history.scrollRestoration="auto"}),addEventListener("visibilitychange",()=>{if(document.visibilityState==="hidden"){Ie(O);try{sessionStorage[et]=JSON.stringify(ne)}catch{}}}),(o=navigator.connection)!=null&&o.saveData||at(),n.addEventListener("click",l=>{if(l.button||l.which!==1||l.metaKey||l.ctrlKey||l.shiftKey||l.altKey||l.defaultPrevented)return;const u=ze(l.composedPath()[0],n);if(!u)return;const{url:f,external:m,target:_}=ke(u,e);if(!f)return;if(_==="_parent"||_==="_top"){if(window.parent!==window)return}else if(_&&_!=="_self")return;const h=me(u);if(!(u instanceof SVGAElement)&&f.protocol!==location.protocol&&!(f.protocol==="https:"||f.protocol==="http:"))return;if(m||h.reload){Me({url:f,type:"link"})||l.preventDefault(),v=!0;return}const[y,w]=f.href.split("#");if(w!==void 0&&y===location.href.split("#")[0]){V=!0,Ie(O),t.url=f,Z.page.set({...Q,url:f}),Z.page.notify();return}pe({url:f,scroll:h.noscroll?oe():null,keepfocus:!1,redirect_chain:[],details:{state:{},replaceState:f.href===location.href},accepted:()=>l.preventDefault(),blocked:()=>l.preventDefault(),type:"link"})}),n.addEventListener("submit",l=>{if(l.defaultPrevented)return;const u=HTMLFormElement.prototype.cloneNode.call(l.target),f=l.submitter;if(((f==null?void 0:f.formMethod)||u.method)!=="get")return;const _=new URL((f==null?void 0:f.hasAttribute("formaction"))&&(f==null?void 0:f.formAction)||u.action);if(We(_,e))return;const h=l.target,{noscroll:b,reload:y}=me(h);if(y)return;l.preventDefault(),l.stopPropagation();const w=new FormData(h),k=f==null?void 0:f.getAttribute("name");k&&w.append(k,(f==null?void 0:f.getAttribute("value"))??""),_.search=new URLSearchParams(w).toString(),pe({url:_,scroll:b?oe():null,keepfocus:!1,redirect_chain:[],details:{state:{},replaceState:!1},nav_token:{},accepted:()=>{},blocked:()=>{},type:"form"})}),addEventListener("popstate",l=>{var u;if((u=l.state)!=null&&u[z]){if(l.state[z]===O)return;const f=ne[l.state[z]];if(t.url.href.split("#")[0]===location.href.split("#")[0]){ne[O]=oe(),O=l.state[z],scrollTo(f.x,f.y);return}const m=l.state[z]-O;pe({url:new URL(location.href),scroll:f,keepfocus:!1,redirect_chain:[],details:null,accepted:()=>{O=l.state[z]},blocked:()=>{history.go(-m)},type:"popstate",delta:m})}}),addEventListener("hashchange",()=>{V&&(V=!1,history.replaceState({...history.state,[z]:++O},"",location.href))});for(const l of document.querySelectorAll("link"))l.rel==="icon"&&(l.href=l.href);addEventListener("pageshow",l=>{l.persisted&&Z.navigating.set(null)})},_hydrate:async({status:o=200,error:l,node_ids:u,params:f,route:m,data:_,form:h})=>{c=!0;const b=new URL(location.href);({params:f={},route:m={id:null}}=ue(b,!1)||{});let y;try{const w=u.map(async(k,N)=>{const K=_[N];return ve({loader:ge[k],url:b,params:f,route:m,parent:async()=>{const L={};for(let E=0;E<N;E+=1)Object.assign(L,(await w[E]).data);return L},server_data_node:be(K)})});y=await ae({url:b,params:f,branch:await Promise.all(w),status:o,error:l,form:h,route:Le.find(({id:k})=>k===m.id)??null})}catch(w){if(w instanceof Qe){await re(new URL(w.location,location.href));return}y=await fe({status:w instanceof Oe?w.status:500,error:await ie(w,{url:b,params:f,route:m}),url:b,route:m})}je(y)}}}async function xe(r,e){var p;const n=new URL(r);n.pathname=Lt(r.pathname),n.searchParams.append("x-sveltekit-invalidated",e.map(t=>t?"1":"").join("_"));const i=await he(n.href),a=await i.json();if(!i.ok)throw new Error(a);return(p=a.nodes)==null||p.forEach(t=>{(t==null?void 0:t.type)==="data"&&(t.data=rn(t.data),t.uses={dependencies:new Set(t.uses.dependencies??[]),params:new Set(t.uses.params??[]),parent:!!t.uses.parent,route:!!t.uses.route,url:!!t.uses.url})}),a}function ie(r,e){return r instanceof Oe?r.body:Xt.handleError({error:r,event:e})??{message:e.route.id!=null?"Internal Error":"Not Found"}}function Ae(){const r=document.querySelector("[autofocus]");if(r)r.focus();else{const e=document.body,n=e.getAttribute("tabindex");return e.tabIndex=-1,e.focus({preventScroll:!0}),n!==null?e.setAttribute("tabindex",n):e.removeAttribute("tabindex"),new Promise(i=>{setTimeout(()=>{var a;i((a=getSelection())==null?void 0:a.removeAllRanges())})})}}async function pn({env:r,hydrate:e,paths:n,target:i,version:a}){ht(n),wt(a);const p=sn({target:i,base:n.base});gt({client:p}),e?await p._hydrate(e):p.goto(location.href,{replaceState:!0}),p._start_router()}export{pn as start};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
