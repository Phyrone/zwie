import{w as Wr}from"./index-1e50f43e.js";import{c as oe}from"./_commonjsHelpers-28e086c5.js";function ae(h){throw new Error('Could not dynamically require "'+h+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var ee={},$r={get exports(){return ee},set exports(h){ee=h}};/*!
    localForage -- Offline Storage, Improved
    Version 1.10.0
    https://localforage.github.io/localForage
    (c) 2013-2017 Mozilla, Apache License 2.0
*/(function(h,Vr){(function(W){h.exports=W()})(function(){return function W(U,K,S){function T(B,Y){if(!K[B]){if(!U[B]){var d=typeof ae=="function"&&ae;if(!Y&&d)return d(B,!0);if(w)return w(B,!0);var y=new Error("Cannot find module '"+B+"'");throw y.code="MODULE_NOT_FOUND",y}var R=K[B]={exports:{}};U[B][0].call(R.exports,function(N){var z=U[B][1][N];return T(z||N)},R,R.exports,W,U,K,S)}return K[B].exports}for(var w=typeof ae=="function"&&ae,O=0;O<S.length;O++)T(S[O]);return T}({1:[function(W,U,K){(function(S){var T=S.MutationObserver||S.WebKitMutationObserver,w;if(T){var O=0,B=new T(N),Y=S.document.createTextNode("");B.observe(Y,{characterData:!0}),w=function(){Y.data=O=++O%2}}else if(!S.setImmediate&&typeof S.MessageChannel<"u"){var d=new S.MessageChannel;d.port1.onmessage=N,w=function(){d.port2.postMessage(0)}}else"document"in S&&"onreadystatechange"in S.document.createElement("script")?w=function(){var D=S.document.createElement("script");D.onreadystatechange=function(){N(),D.onreadystatechange=null,D.parentNode.removeChild(D),D=null},S.document.documentElement.appendChild(D)}:w=function(){setTimeout(N,0)};var y,R=[];function N(){y=!0;for(var D,$,x=R.length;x;){for($=R,R=[],D=-1;++D<x;)$[D]();x=R.length}y=!1}U.exports=z;function z(D){R.push(D)===1&&!y&&w()}}).call(this,typeof oe<"u"?oe:typeof self<"u"?self:typeof window<"u"?window:{})},{}],2:[function(W,U,K){var S=W(1);function T(){}var w={},O=["REJECTED"],B=["FULFILLED"],Y=["PENDING"];U.exports=d;function d(l){if(typeof l!="function")throw new TypeError("resolver must be a function");this.state=Y,this.queue=[],this.outcome=void 0,l!==T&&z(this,l)}d.prototype.catch=function(l){return this.then(null,l)},d.prototype.then=function(l,g){if(typeof l!="function"&&this.state===B||typeof g!="function"&&this.state===O)return this;var p=new this.constructor(T);if(this.state!==Y){var E=this.state===B?l:g;R(p,E,this.outcome)}else this.queue.push(new y(p,l,g));return p};function y(l,g,p){this.promise=l,typeof g=="function"&&(this.onFulfilled=g,this.callFulfilled=this.otherCallFulfilled),typeof p=="function"&&(this.onRejected=p,this.callRejected=this.otherCallRejected)}y.prototype.callFulfilled=function(l){w.resolve(this.promise,l)},y.prototype.otherCallFulfilled=function(l){R(this.promise,this.onFulfilled,l)},y.prototype.callRejected=function(l){w.reject(this.promise,l)},y.prototype.otherCallRejected=function(l){R(this.promise,this.onRejected,l)};function R(l,g,p){S(function(){var E;try{E=g(p)}catch(C){return w.reject(l,C)}E===l?w.reject(l,new TypeError("Cannot resolve promise with itself")):w.resolve(l,E)})}w.resolve=function(l,g){var p=D(N,g);if(p.status==="error")return w.reject(l,p.value);var E=p.value;if(E)z(l,E);else{l.state=B,l.outcome=g;for(var C=-1,L=l.queue.length;++C<L;)l.queue[C].callFulfilled(g)}return l},w.reject=function(l,g){l.state=O,l.outcome=g;for(var p=-1,E=l.queue.length;++p<E;)l.queue[p].callRejected(g);return l};function N(l){var g=l&&l.then;if(l&&(typeof l=="object"||typeof l=="function")&&typeof g=="function")return function(){g.apply(l,arguments)}}function z(l,g){var p=!1;function E(F){p||(p=!0,w.reject(l,F))}function C(F){p||(p=!0,w.resolve(l,F))}function L(){g(C,E)}var P=D(L);P.status==="error"&&E(P.value)}function D(l,g){var p={};try{p.value=l(g),p.status="success"}catch(E){p.status="error",p.value=E}return p}d.resolve=$;function $(l){return l instanceof this?l:w.resolve(new this(T),l)}d.reject=x;function x(l){var g=new this(T);return w.reject(g,l)}d.all=ie;function ie(l){var g=this;if(Object.prototype.toString.call(l)!=="[object Array]")return this.reject(new TypeError("must be an array"));var p=l.length,E=!1;if(!p)return this.resolve([]);for(var C=new Array(p),L=0,P=-1,F=new this(T);++P<p;)V(l[P],P);return F;function V(J,re){g.resolve(J).then(fe,function(X){E||(E=!0,w.reject(F,X))});function fe(X){C[re]=X,++L===p&&!E&&(E=!0,w.resolve(F,C))}}}d.race=H;function H(l){var g=this;if(Object.prototype.toString.call(l)!=="[object Array]")return this.reject(new TypeError("must be an array"));var p=l.length,E=!1;if(!p)return this.resolve([]);for(var C=-1,L=new this(T);++C<p;)P(l[C]);return L;function P(F){g.resolve(F).then(function(V){E||(E=!0,w.resolve(L,V))},function(V){E||(E=!0,w.reject(L,V))})}}},{1:1}],3:[function(W,U,K){(function(S){typeof S.Promise!="function"&&(S.Promise=W(2))}).call(this,typeof oe<"u"?oe:typeof self<"u"?self:typeof window<"u"?window:{})},{2:2}],4:[function(W,U,K){var S=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function T(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function w(){try{if(typeof indexedDB<"u")return indexedDB;if(typeof webkitIndexedDB<"u")return webkitIndexedDB;if(typeof mozIndexedDB<"u")return mozIndexedDB;if(typeof OIndexedDB<"u")return OIndexedDB;if(typeof msIndexedDB<"u")return msIndexedDB}catch{return}}var O=w();function B(){try{if(!O||!O.open)return!1;var e=typeof openDatabase<"u"&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),n=typeof fetch=="function"&&fetch.toString().indexOf("[native code")!==-1;return(!e||n)&&typeof indexedDB<"u"&&typeof IDBKeyRange<"u"}catch{return!1}}function Y(e,n){e=e||[],n=n||{};try{return new Blob(e,n)}catch(t){if(t.name!=="TypeError")throw t;for(var r=typeof BlobBuilder<"u"?BlobBuilder:typeof MSBlobBuilder<"u"?MSBlobBuilder:typeof MozBlobBuilder<"u"?MozBlobBuilder:WebKitBlobBuilder,o=new r,a=0;a<e.length;a+=1)o.append(e[a]);return o.getBlob(n.type)}}typeof Promise>"u"&&W(3);var d=Promise;function y(e,n){n&&e.then(function(r){n(null,r)},function(r){n(r)})}function R(e,n,r){typeof n=="function"&&e.then(n),typeof r=="function"&&e.catch(r)}function N(e){return typeof e!="string"&&(console.warn(e+" used as a key, but it is not a string."),e=String(e)),e}function z(){if(arguments.length&&typeof arguments[arguments.length-1]=="function")return arguments[arguments.length-1]}var D="local-forage-detect-blob-support",$=void 0,x={},ie=Object.prototype.toString,H="readonly",l="readwrite";function g(e){for(var n=e.length,r=new ArrayBuffer(n),o=new Uint8Array(r),a=0;a<n;a++)o[a]=e.charCodeAt(a);return r}function p(e){return new d(function(n){var r=e.transaction(D,l),o=Y([""]);r.objectStore(D).put(o,"key"),r.onabort=function(a){a.preventDefault(),a.stopPropagation(),n(!1)},r.oncomplete=function(){var a=navigator.userAgent.match(/Chrome\/(\d+)/),t=navigator.userAgent.match(/Edge\//);n(t||!a||parseInt(a[1],10)>=43)}}).catch(function(){return!1})}function E(e){return typeof $=="boolean"?d.resolve($):p(e).then(function(n){return $=n,$})}function C(e){var n=x[e.name],r={};r.promise=new d(function(o,a){r.resolve=o,r.reject=a}),n.deferredOperations.push(r),n.dbReady?n.dbReady=n.dbReady.then(function(){return r.promise}):n.dbReady=r.promise}function L(e){var n=x[e.name],r=n.deferredOperations.pop();if(r)return r.resolve(),r.promise}function P(e,n){var r=x[e.name],o=r.deferredOperations.pop();if(o)return o.reject(n),o.promise}function F(e,n){return new d(function(r,o){if(x[e.name]=x[e.name]||ge(),e.db)if(n)C(e),e.db.close();else return r(e.db);var a=[e.name];n&&a.push(e.version);var t=O.open.apply(O,a);n&&(t.onupgradeneeded=function(i){var f=t.result;try{f.createObjectStore(e.storeName),i.oldVersion<=1&&f.createObjectStore(D)}catch(u){if(u.name==="ConstraintError")console.warn('The database "'+e.name+'" has been upgraded from version '+i.oldVersion+" to version "+i.newVersion+', but the storage "'+e.storeName+'" already exists.');else throw u}}),t.onerror=function(i){i.preventDefault(),o(t.error)},t.onsuccess=function(){var i=t.result;i.onversionchange=function(f){f.target.close()},r(i),L(e)}})}function V(e){return F(e,!1)}function J(e){return F(e,!0)}function re(e,n){if(!e.db)return!0;var r=!e.db.objectStoreNames.contains(e.storeName),o=e.version<e.db.version,a=e.version>e.db.version;if(o&&(e.version!==n&&console.warn('The database "'+e.name+`" can't be downgraded from version `+e.db.version+" to version "+e.version+"."),e.version=e.db.version),a||r){if(r){var t=e.db.version+1;t>e.version&&(e.version=t)}return!0}return!1}function fe(e){return new d(function(n,r){var o=new FileReader;o.onerror=r,o.onloadend=function(a){var t=btoa(a.target.result||"");n({__local_forage_encoded_blob:!0,data:t,type:e.type})},o.readAsBinaryString(e)})}function X(e){var n=g(atob(e.data));return Y([n],{type:e.type})}function pe(e){return e&&e.__local_forage_encoded_blob}function $e(e){var n=this,r=n._initReady().then(function(){var o=x[n._dbInfo.name];if(o&&o.dbReady)return o.dbReady});return R(r,e,e),r}function Ve(e){C(e);for(var n=x[e.name],r=n.forages,o=0;o<r.length;o++){var a=r[o];a._dbInfo.db&&(a._dbInfo.db.close(),a._dbInfo.db=null)}return e.db=null,V(e).then(function(t){return e.db=t,re(e)?J(e):t}).then(function(t){e.db=n.db=t;for(var i=0;i<r.length;i++)r[i]._dbInfo.db=t}).catch(function(t){throw P(e,t),t})}function k(e,n,r,o){o===void 0&&(o=1);try{var a=e.db.transaction(e.storeName,n);r(null,a)}catch(t){if(o>0&&(!e.db||t.name==="InvalidStateError"||t.name==="NotFoundError"))return d.resolve().then(function(){if(!e.db||t.name==="NotFoundError"&&!e.db.objectStoreNames.contains(e.storeName)&&e.version<=e.db.version)return e.db&&(e.version=e.db.version+1),J(e)}).then(function(){return Ve(e).then(function(){k(e,n,r,o-1)})}).catch(r);r(t)}}function ge(){return{forages:[],db:null,dbReady:null,deferredOperations:[]}}function ke(e){var n=this,r={db:null};if(e)for(var o in e)r[o]=e[o];var a=x[r.name];a||(a=ge(),x[r.name]=a),a.forages.push(n),n._initReady||(n._initReady=n.ready,n.ready=$e);var t=[];function i(){return d.resolve()}for(var f=0;f<a.forages.length;f++){var u=a.forages[f];u!==n&&t.push(u._initReady().catch(i))}var c=a.forages.slice(0);return d.all(t).then(function(){return r.db=a.db,V(r)}).then(function(s){return r.db=s,re(r,n._defaultConfig.version)?J(r):s}).then(function(s){r.db=a.db=s,n._dbInfo=r;for(var v=0;v<c.length;v++){var m=c[v];m!==n&&(m._dbInfo.db=r.db,m._dbInfo.version=r.version)}})}function Ke(e,n){var r=this;e=N(e);var o=new d(function(a,t){r.ready().then(function(){k(r._dbInfo,H,function(i,f){if(i)return t(i);try{var u=f.objectStore(r._dbInfo.storeName),c=u.get(e);c.onsuccess=function(){var s=c.result;s===void 0&&(s=null),pe(s)&&(s=X(s)),a(s)},c.onerror=function(){t(c.error)}}catch(s){t(s)}})}).catch(t)});return y(o,n),o}function Qe(e,n){var r=this,o=new d(function(a,t){r.ready().then(function(){k(r._dbInfo,H,function(i,f){if(i)return t(i);try{var u=f.objectStore(r._dbInfo.storeName),c=u.openCursor(),s=1;c.onsuccess=function(){var v=c.result;if(v){var m=v.value;pe(m)&&(m=X(m));var b=e(m,v.key,s++);b!==void 0?a(b):v.continue()}else a()},c.onerror=function(){t(c.error)}}catch(v){t(v)}})}).catch(t)});return y(o,n),o}function Ge(e,n,r){var o=this;e=N(e);var a=new d(function(t,i){var f;o.ready().then(function(){return f=o._dbInfo,ie.call(n)==="[object Blob]"?E(f.db).then(function(u){return u?n:fe(n)}):n}).then(function(u){k(o._dbInfo,l,function(c,s){if(c)return i(c);try{var v=s.objectStore(o._dbInfo.storeName);u===null&&(u=void 0);var m=v.put(u,e);s.oncomplete=function(){u===void 0&&(u=null),t(u)},s.onabort=s.onerror=function(){var b=m.error?m.error:m.transaction.error;i(b)}}catch(b){i(b)}})}).catch(i)});return y(a,r),a}function He(e,n){var r=this;e=N(e);var o=new d(function(a,t){r.ready().then(function(){k(r._dbInfo,l,function(i,f){if(i)return t(i);try{var u=f.objectStore(r._dbInfo.storeName),c=u.delete(e);f.oncomplete=function(){a()},f.onerror=function(){t(c.error)},f.onabort=function(){var s=c.error?c.error:c.transaction.error;t(s)}}catch(s){t(s)}})}).catch(t)});return y(o,n),o}function Xe(e){var n=this,r=new d(function(o,a){n.ready().then(function(){k(n._dbInfo,l,function(t,i){if(t)return a(t);try{var f=i.objectStore(n._dbInfo.storeName),u=f.clear();i.oncomplete=function(){o()},i.onabort=i.onerror=function(){var c=u.error?u.error:u.transaction.error;a(c)}}catch(c){a(c)}})}).catch(a)});return y(r,e),r}function je(e){var n=this,r=new d(function(o,a){n.ready().then(function(){k(n._dbInfo,H,function(t,i){if(t)return a(t);try{var f=i.objectStore(n._dbInfo.storeName),u=f.count();u.onsuccess=function(){o(u.result)},u.onerror=function(){a(u.error)}}catch(c){a(c)}})}).catch(a)});return y(r,e),r}function Je(e,n){var r=this,o=new d(function(a,t){if(e<0){a(null);return}r.ready().then(function(){k(r._dbInfo,H,function(i,f){if(i)return t(i);try{var u=f.objectStore(r._dbInfo.storeName),c=!1,s=u.openKeyCursor();s.onsuccess=function(){var v=s.result;if(!v){a(null);return}e===0||c?a(v.key):(c=!0,v.advance(e))},s.onerror=function(){t(s.error)}}catch(v){t(v)}})}).catch(t)});return y(o,n),o}function qe(e){var n=this,r=new d(function(o,a){n.ready().then(function(){k(n._dbInfo,H,function(t,i){if(t)return a(t);try{var f=i.objectStore(n._dbInfo.storeName),u=f.openKeyCursor(),c=[];u.onsuccess=function(){var s=u.result;if(!s){o(c);return}c.push(s.key),s.continue()},u.onerror=function(){a(u.error)}}catch(s){a(s)}})}).catch(a)});return y(r,e),r}function Ze(e,n){n=z.apply(this,arguments);var r=this.config();e=typeof e!="function"&&e||{},e.name||(e.name=e.name||r.name,e.storeName=e.storeName||r.storeName);var o=this,a;if(!e.name)a=d.reject("Invalid arguments");else{var t=e.name===r.name&&o._dbInfo.db,i=t?d.resolve(o._dbInfo.db):V(e).then(function(f){var u=x[e.name],c=u.forages;u.db=f;for(var s=0;s<c.length;s++)c[s]._dbInfo.db=f;return f});e.storeName?a=i.then(function(f){if(f.objectStoreNames.contains(e.storeName)){var u=f.version+1;C(e);var c=x[e.name],s=c.forages;f.close();for(var v=0;v<s.length;v++){var m=s[v];m._dbInfo.db=null,m._dbInfo.version=u}var b=new d(function(_,A){var I=O.open(e.name,u);I.onerror=function(M){var Z=I.result;Z.close(),A(M)},I.onupgradeneeded=function(){var M=I.result;M.deleteObjectStore(e.storeName)},I.onsuccess=function(){var M=I.result;M.close(),_(M)}});return b.then(function(_){c.db=_;for(var A=0;A<s.length;A++){var I=s[A];I._dbInfo.db=_,L(I._dbInfo)}}).catch(function(_){throw(P(e,_)||d.resolve()).catch(function(){}),_})}}):a=i.then(function(f){C(e);var u=x[e.name],c=u.forages;f.close();for(var s=0;s<c.length;s++){var v=c[s];v._dbInfo.db=null}var m=new d(function(b,_){var A=O.deleteDatabase(e.name);A.onerror=function(){var I=A.result;I&&I.close(),_(A.error)},A.onblocked=function(){console.warn('dropInstance blocked for database "'+e.name+'" until all open connections are closed')},A.onsuccess=function(){var I=A.result;I&&I.close(),b(I)}});return m.then(function(b){u.db=b;for(var _=0;_<c.length;_++){var A=c[_];L(A._dbInfo)}}).catch(function(b){throw(P(e,b)||d.resolve()).catch(function(){}),b})})}return y(a,n),a}var er={_driver:"asyncStorage",_initStorage:ke,_support:B(),iterate:Qe,getItem:Ke,setItem:Ge,removeItem:He,clear:Xe,length:je,key:Je,keys:qe,dropInstance:Ze};function rr(){return typeof openDatabase=="function"}var Q="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",nr="~~local_forage_type~",be=/^~~local_forage_type~([^~]+)~/,ne="__lfsc__:",ue=ne.length,ce="arbf",se="blob",_e="si08",we="ui08",Ee="uic8",Se="si16",Ie="si32",Re="ur16",Ae="ui32",Ne="fl32",De="fl64",xe=ue+ce.length,Be=Object.prototype.toString;function Ce(e){var n=e.length*.75,r=e.length,o,a=0,t,i,f,u;e[e.length-1]==="="&&(n--,e[e.length-2]==="="&&n--);var c=new ArrayBuffer(n),s=new Uint8Array(c);for(o=0;o<r;o+=4)t=Q.indexOf(e[o]),i=Q.indexOf(e[o+1]),f=Q.indexOf(e[o+2]),u=Q.indexOf(e[o+3]),s[a++]=t<<2|i>>4,s[a++]=(i&15)<<4|f>>2,s[a++]=(f&3)<<6|u&63;return c}function le(e){var n=new Uint8Array(e),r="",o;for(o=0;o<n.length;o+=3)r+=Q[n[o]>>2],r+=Q[(n[o]&3)<<4|n[o+1]>>4],r+=Q[(n[o+1]&15)<<2|n[o+2]>>6],r+=Q[n[o+2]&63];return n.length%3===2?r=r.substring(0,r.length-1)+"=":n.length%3===1&&(r=r.substring(0,r.length-2)+"=="),r}function tr(e,n){var r="";if(e&&(r=Be.call(e)),e&&(r==="[object ArrayBuffer]"||e.buffer&&Be.call(e.buffer)==="[object ArrayBuffer]")){var o,a=ne;e instanceof ArrayBuffer?(o=e,a+=ce):(o=e.buffer,r==="[object Int8Array]"?a+=_e:r==="[object Uint8Array]"?a+=we:r==="[object Uint8ClampedArray]"?a+=Ee:r==="[object Int16Array]"?a+=Se:r==="[object Uint16Array]"?a+=Re:r==="[object Int32Array]"?a+=Ie:r==="[object Uint32Array]"?a+=Ae:r==="[object Float32Array]"?a+=Ne:r==="[object Float64Array]"?a+=De:n(new Error("Failed to get type for BinaryArray"))),n(a+le(o))}else if(r==="[object Blob]"){var t=new FileReader;t.onload=function(){var i=nr+e.type+"~"+le(this.result);n(ne+se+i)},t.readAsArrayBuffer(e)}else try{n(JSON.stringify(e))}catch(i){console.error("Couldn't convert value into a JSON string: ",e),n(null,i)}}function or(e){if(e.substring(0,ue)!==ne)return JSON.parse(e);var n=e.substring(xe),r=e.substring(ue,xe),o;if(r===se&&be.test(n)){var a=n.match(be);o=a[1],n=n.substring(a[0].length)}var t=Ce(n);switch(r){case ce:return t;case se:return Y([t],{type:o});case _e:return new Int8Array(t);case we:return new Uint8Array(t);case Ee:return new Uint8ClampedArray(t);case Se:return new Int16Array(t);case Re:return new Uint16Array(t);case Ie:return new Int32Array(t);case Ae:return new Uint32Array(t);case Ne:return new Float32Array(t);case De:return new Float64Array(t);default:throw new Error("Unkown type: "+r)}}var de={serialize:tr,deserialize:or,stringToBuffer:Ce,bufferToString:le};function Oe(e,n,r,o){e.executeSql("CREATE TABLE IF NOT EXISTS "+n.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],r,o)}function ar(e){var n=this,r={db:null};if(e)for(var o in e)r[o]=typeof e[o]!="string"?e[o].toString():e[o];var a=new d(function(t,i){try{r.db=openDatabase(r.name,String(r.version),r.description,r.size)}catch(f){return i(f)}r.db.transaction(function(f){Oe(f,r,function(){n._dbInfo=r,t()},function(u,c){i(c)})},i)});return r.serializer=de,a}function G(e,n,r,o,a,t){e.executeSql(r,o,a,function(i,f){f.code===f.SYNTAX_ERR?i.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?",[n.storeName],function(u,c){c.rows.length?t(u,f):Oe(u,n,function(){u.executeSql(r,o,a,t)},t)},t):t(i,f)},t)}function ir(e,n){var r=this;e=N(e);var o=new d(function(a,t){r.ready().then(function(){var i=r._dbInfo;i.db.transaction(function(f){G(f,i,"SELECT * FROM "+i.storeName+" WHERE key = ? LIMIT 1",[e],function(u,c){var s=c.rows.length?c.rows.item(0).value:null;s&&(s=i.serializer.deserialize(s)),a(s)},function(u,c){t(c)})})}).catch(t)});return y(o,n),o}function fr(e,n){var r=this,o=new d(function(a,t){r.ready().then(function(){var i=r._dbInfo;i.db.transaction(function(f){G(f,i,"SELECT * FROM "+i.storeName,[],function(u,c){for(var s=c.rows,v=s.length,m=0;m<v;m++){var b=s.item(m),_=b.value;if(_&&(_=i.serializer.deserialize(_)),_=e(_,b.key,m+1),_!==void 0){a(_);return}}a()},function(u,c){t(c)})})}).catch(t)});return y(o,n),o}function Te(e,n,r,o){var a=this;e=N(e);var t=new d(function(i,f){a.ready().then(function(){n===void 0&&(n=null);var u=n,c=a._dbInfo;c.serializer.serialize(n,function(s,v){v?f(v):c.db.transaction(function(m){G(m,c,"INSERT OR REPLACE INTO "+c.storeName+" (key, value) VALUES (?, ?)",[e,s],function(){i(u)},function(b,_){f(_)})},function(m){if(m.code===m.QUOTA_ERR){if(o>0){i(Te.apply(a,[e,u,r,o-1]));return}f(m)}})})}).catch(f)});return y(t,r),t}function ur(e,n,r){return Te.apply(this,[e,n,r,1])}function cr(e,n){var r=this;e=N(e);var o=new d(function(a,t){r.ready().then(function(){var i=r._dbInfo;i.db.transaction(function(f){G(f,i,"DELETE FROM "+i.storeName+" WHERE key = ?",[e],function(){a()},function(u,c){t(c)})})}).catch(t)});return y(o,n),o}function sr(e){var n=this,r=new d(function(o,a){n.ready().then(function(){var t=n._dbInfo;t.db.transaction(function(i){G(i,t,"DELETE FROM "+t.storeName,[],function(){o()},function(f,u){a(u)})})}).catch(a)});return y(r,e),r}function lr(e){var n=this,r=new d(function(o,a){n.ready().then(function(){var t=n._dbInfo;t.db.transaction(function(i){G(i,t,"SELECT COUNT(key) as c FROM "+t.storeName,[],function(f,u){var c=u.rows.item(0).c;o(c)},function(f,u){a(u)})})}).catch(a)});return y(r,e),r}function dr(e,n){var r=this,o=new d(function(a,t){r.ready().then(function(){var i=r._dbInfo;i.db.transaction(function(f){G(f,i,"SELECT key FROM "+i.storeName+" WHERE id = ? LIMIT 1",[e+1],function(u,c){var s=c.rows.length?c.rows.item(0).key:null;a(s)},function(u,c){t(c)})})}).catch(t)});return y(o,n),o}function vr(e){var n=this,r=new d(function(o,a){n.ready().then(function(){var t=n._dbInfo;t.db.transaction(function(i){G(i,t,"SELECT key FROM "+t.storeName,[],function(f,u){for(var c=[],s=0;s<u.rows.length;s++)c.push(u.rows.item(s).key);o(c)},function(f,u){a(u)})})}).catch(a)});return y(r,e),r}function hr(e){return new d(function(n,r){e.transaction(function(o){o.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'",[],function(a,t){for(var i=[],f=0;f<t.rows.length;f++)i.push(t.rows.item(f).name);n({db:e,storeNames:i})},function(a,t){r(t)})},function(o){r(o)})})}function yr(e,n){n=z.apply(this,arguments);var r=this.config();e=typeof e!="function"&&e||{},e.name||(e.name=e.name||r.name,e.storeName=e.storeName||r.storeName);var o=this,a;return e.name?a=new d(function(t){var i;e.name===r.name?i=o._dbInfo.db:i=openDatabase(e.name,"","",0),e.storeName?t({db:i,storeNames:[e.storeName]}):t(hr(i))}).then(function(t){return new d(function(i,f){t.db.transaction(function(u){function c(b){return new d(function(_,A){u.executeSql("DROP TABLE IF EXISTS "+b,[],function(){_()},function(I,M){A(M)})})}for(var s=[],v=0,m=t.storeNames.length;v<m;v++)s.push(c(t.storeNames[v]));d.all(s).then(function(){i()}).catch(function(b){f(b)})},function(u){f(u)})})}):a=d.reject("Invalid arguments"),y(a,n),a}var mr={_driver:"webSQLStorage",_initStorage:ar,_support:rr(),iterate:fr,getItem:ir,setItem:ur,removeItem:cr,clear:sr,length:lr,key:dr,keys:vr,dropInstance:yr};function pr(){try{return typeof localStorage<"u"&&"setItem"in localStorage&&!!localStorage.setItem}catch{return!1}}function Le(e,n){var r=e.name+"/";return e.storeName!==n.storeName&&(r+=e.storeName+"/"),r}function gr(){var e="_localforage_support_test";try{return localStorage.setItem(e,!0),localStorage.removeItem(e),!1}catch{return!0}}function br(){return!gr()||localStorage.length>0}function _r(e){var n=this,r={};if(e)for(var o in e)r[o]=e[o];return r.keyPrefix=Le(e,n._defaultConfig),br()?(n._dbInfo=r,r.serializer=de,d.resolve()):d.reject()}function wr(e){var n=this,r=n.ready().then(function(){for(var o=n._dbInfo.keyPrefix,a=localStorage.length-1;a>=0;a--){var t=localStorage.key(a);t.indexOf(o)===0&&localStorage.removeItem(t)}});return y(r,e),r}function Er(e,n){var r=this;e=N(e);var o=r.ready().then(function(){var a=r._dbInfo,t=localStorage.getItem(a.keyPrefix+e);return t&&(t=a.serializer.deserialize(t)),t});return y(o,n),o}function Sr(e,n){var r=this,o=r.ready().then(function(){for(var a=r._dbInfo,t=a.keyPrefix,i=t.length,f=localStorage.length,u=1,c=0;c<f;c++){var s=localStorage.key(c);if(s.indexOf(t)===0){var v=localStorage.getItem(s);if(v&&(v=a.serializer.deserialize(v)),v=e(v,s.substring(i),u++),v!==void 0)return v}}});return y(o,n),o}function Ir(e,n){var r=this,o=r.ready().then(function(){var a=r._dbInfo,t;try{t=localStorage.key(e)}catch{t=null}return t&&(t=t.substring(a.keyPrefix.length)),t});return y(o,n),o}function Rr(e){var n=this,r=n.ready().then(function(){for(var o=n._dbInfo,a=localStorage.length,t=[],i=0;i<a;i++){var f=localStorage.key(i);f.indexOf(o.keyPrefix)===0&&t.push(f.substring(o.keyPrefix.length))}return t});return y(r,e),r}function Ar(e){var n=this,r=n.keys().then(function(o){return o.length});return y(r,e),r}function Nr(e,n){var r=this;e=N(e);var o=r.ready().then(function(){var a=r._dbInfo;localStorage.removeItem(a.keyPrefix+e)});return y(o,n),o}function Dr(e,n,r){var o=this;e=N(e);var a=o.ready().then(function(){n===void 0&&(n=null);var t=n;return new d(function(i,f){var u=o._dbInfo;u.serializer.serialize(n,function(c,s){if(s)f(s);else try{localStorage.setItem(u.keyPrefix+e,c),i(t)}catch(v){(v.name==="QuotaExceededError"||v.name==="NS_ERROR_DOM_QUOTA_REACHED")&&f(v),f(v)}})})});return y(a,r),a}function xr(e,n){if(n=z.apply(this,arguments),e=typeof e!="function"&&e||{},!e.name){var r=this.config();e.name=e.name||r.name,e.storeName=e.storeName||r.storeName}var o=this,a;return e.name?a=new d(function(t){e.storeName?t(Le(e,o._defaultConfig)):t(e.name+"/")}).then(function(t){for(var i=localStorage.length-1;i>=0;i--){var f=localStorage.key(i);f.indexOf(t)===0&&localStorage.removeItem(f)}}):a=d.reject("Invalid arguments"),y(a,n),a}var Br={_driver:"localStorageWrapper",_initStorage:_r,_support:pr(),iterate:Sr,getItem:Er,setItem:Dr,removeItem:Nr,clear:wr,length:Ar,key:Ir,keys:Rr,dropInstance:xr},Cr=function(n,r){return n===r||typeof n=="number"&&typeof r=="number"&&isNaN(n)&&isNaN(r)},Or=function(n,r){for(var o=n.length,a=0;a<o;){if(Cr(n[a],r))return!0;a++}return!1},Pe=Array.isArray||function(e){return Object.prototype.toString.call(e)==="[object Array]"},q={},Fe={},j={INDEXEDDB:er,WEBSQL:mr,LOCALSTORAGE:Br},Tr=[j.INDEXEDDB._driver,j.WEBSQL._driver,j.LOCALSTORAGE._driver],te=["dropInstance"],ve=["clear","getItem","iterate","key","keys","length","removeItem","setItem"].concat(te),Lr={description:"",driver:Tr.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1};function Pr(e,n){e[n]=function(){var r=arguments;return e.ready().then(function(){return e[n].apply(e,r)})}}function he(){for(var e=1;e<arguments.length;e++){var n=arguments[e];if(n)for(var r in n)n.hasOwnProperty(r)&&(Pe(n[r])?arguments[0][r]=n[r].slice():arguments[0][r]=n[r])}return arguments[0]}var Fr=function(){function e(n){T(this,e);for(var r in j)if(j.hasOwnProperty(r)){var o=j[r],a=o._driver;this[r]=a,q[a]||this.defineDriver(o)}this._defaultConfig=he({},Lr),this._config=he({},this._defaultConfig,n),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch(function(){})}return e.prototype.config=function(r){if((typeof r>"u"?"undefined":S(r))==="object"){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var o in r){if(o==="storeName"&&(r[o]=r[o].replace(/\W/g,"_")),o==="version"&&typeof r[o]!="number")return new Error("Database version must be a number.");this._config[o]=r[o]}return"driver"in r&&r.driver?this.setDriver(this._config.driver):!0}else return typeof r=="string"?this._config[r]:this._config},e.prototype.defineDriver=function(r,o,a){var t=new d(function(i,f){try{var u=r._driver,c=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");if(!r._driver){f(c);return}for(var s=ve.concat("_initStorage"),v=0,m=s.length;v<m;v++){var b=s[v],_=!Or(te,b);if((_||r[b])&&typeof r[b]!="function"){f(c);return}}var A=function(){for(var Z=function(Yr){return function(){var zr=new Error("Method "+Yr+" is not implemented by the current driver"),Me=d.reject(zr);return y(Me,arguments[arguments.length-1]),Me}},ye=0,Ur=te.length;ye<Ur;ye++){var me=te[ye];r[me]||(r[me]=Z(me))}};A();var I=function(Z){q[u]&&console.info("Redefining LocalForage driver: "+u),q[u]=r,Fe[u]=Z,i()};"_support"in r?r._support&&typeof r._support=="function"?r._support().then(I,f):I(!!r._support):I(!0)}catch(M){f(M)}});return R(t,o,a),t},e.prototype.driver=function(){return this._driver||null},e.prototype.getDriver=function(r,o,a){var t=q[r]?d.resolve(q[r]):d.reject(new Error("Driver not found."));return R(t,o,a),t},e.prototype.getSerializer=function(r){var o=d.resolve(de);return R(o,r),o},e.prototype.ready=function(r){var o=this,a=o._driverSet.then(function(){return o._ready===null&&(o._ready=o._initDriver()),o._ready});return R(a,r,r),a},e.prototype.setDriver=function(r,o,a){var t=this;Pe(r)||(r=[r]);var i=this._getSupportedDrivers(r);function f(){t._config.driver=t.driver()}function u(v){return t._extend(v),f(),t._ready=t._initStorage(t._config),t._ready}function c(v){return function(){var m=0;function b(){for(;m<v.length;){var _=v[m];return m++,t._dbInfo=null,t._ready=null,t.getDriver(_).then(u).catch(b)}f();var A=new Error("No available storage method found.");return t._driverSet=d.reject(A),t._driverSet}return b()}}var s=this._driverSet!==null?this._driverSet.catch(function(){return d.resolve()}):d.resolve();return this._driverSet=s.then(function(){var v=i[0];return t._dbInfo=null,t._ready=null,t.getDriver(v).then(function(m){t._driver=m._driver,f(),t._wrapLibraryMethodsWithReady(),t._initDriver=c(i)})}).catch(function(){f();var v=new Error("No available storage method found.");return t._driverSet=d.reject(v),t._driverSet}),R(this._driverSet,o,a),this._driverSet},e.prototype.supports=function(r){return!!Fe[r]},e.prototype._extend=function(r){he(this,r)},e.prototype._getSupportedDrivers=function(r){for(var o=[],a=0,t=r.length;a<t;a++){var i=r[a];this.supports(i)&&o.push(i)}return o},e.prototype._wrapLibraryMethodsWithReady=function(){for(var r=0,o=ve.length;r<o;r++)Pr(this,ve[r])},e.prototype.createInstance=function(r){return new e(r)},e}(),Mr=new Fr;U.exports=Mr},{3:3}]},{},[4])(4)})})($r);var Ue=(h=>(h.default="default",h.light="light",h.dark="dark",h.cupcake="cupcake",h.bumblebee="bumblebee",h.emerald="emerald",h.corporate="corporate",h.synthwave="synthwave",h.retro="retro",h.cyberpunk="cyberpunk",h.valentine="valentine",h.halloween="halloween",h.garden="garden",h.forest="forest",h.aqua="aqua",h.lofi="lofi",h.pastel="pastel",h.fantasy="fantasy",h.wireframe="wireframe",h.black="black",h.luxury="luxury",h.dracula="dracula",h.cmyk="cmyk",h.autumn="autumn",h.business="business",h.acid="acid",h.lemonade="lemonade",h.night="night",h.coffee="coffee",h.winter="winter",h))(Ue||{});const Gr=Object.values(Ue),Ye=Wr("default"),ze="zwie::theme";let We=!1;Ye.subscribe(h=>{console.log("theme changed",h),document.documentElement.setAttribute("data-theme",h),We&&ee.setItem(ze,h).then()});ee.ready().then(()=>ee.getItem(ze).then(h=>{We=!0,h&&Ye.set(h)}));export{Ye as a,ee as l,Gr as t};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
