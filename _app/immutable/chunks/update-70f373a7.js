var d=Object.defineProperty;var f=(t,e,l)=>e in t?d(t,e,{enumerable:!0,configurable:!0,writable:!0,value:l}):t[e]=l;var n=(t,e,l)=>(f(t,typeof e!="symbol"?e+"":e,l),l);import{w as o}from"./index-1e50f43e.js";import{S as s}from"./sweetalert2.all-59c9fe1c.js";const c=o([]);function g(t){const e=new p(t);return c.update(l=>[e,...l]),e}class p{constructor(e){n(this,"onAlertClose");n(this,"onAlertClick");n(this,"text");n(this,"type");n(this,"closeable");n(this,"closeOnClick");this.text=o(e.text),this.type=o(e.type??"none"),this.closeable=o(e.showCloseButton??!0),this.closeOnClick=e.closeOnClick??!1,this.onAlertClose=e.onClose,this.onAlertClick=e.onClick}click(){this.onAlertClick&&this.onAlertClick(this),this.closeOnClick&&this.close()}close(){console.log("close",this),c.update(e=>e.filter(l=>l!==this)),this.onAlertClose&&this.onAlertClose(this)}}function u(){return"__TAURI__"in window?"tauri":"web"}const w=u();let i;function a(){i.active&&g({text:"Update installed Click here to Restart",type:"info",showCloseButton:!1,onClick:async t=>{t.text.set("Installing Please wait..."),await h()}})}async function h(){await i.update(),i.installing?(console.log("SW still installing waiting for it to finish"),i.installing.addEventListener("statechange",r)):await r()}async function r(){console.log("SW installed apply update to Application"),i.waiting?i.waiting.postMessage("APPLY_UPDATE"):window.location.reload()}async function y(){if(w==="tauri"){console.log("Service Worker skipped! (Tauri)");return}if("serviceWorker"in navigator){navigator.serviceWorker.addEventListener("controllerchange",()=>{console.log("Controllerchange event -> reloading"),s.fire({title:"Restarting",text:"Please Wait"}),s.showLoading(null),window.location.reload()});const t=await navigator.serviceWorker.register("/service-worker.js");t&&(i=t,i.waiting||i.installing?a():i.addEventListener("updatefound",a),setInterval(()=>t.update(),1e3*60*60))}else console.log("Service Worker not supported by browser")}const k=o();window.addEventListener("beforeinstallprompt",t=>{t.preventDefault(),k.set(t)});export{c as a,k as b,y as i};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLTcwZjM3M2E3LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvc2NyaXB0cy9taW5vci9hbGVydHMudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvc2NyaXB0cy9taW5vci9wbGF0Zm9ybS50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9zY3JpcHRzL21pbm9yL3VwZGF0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3dyaXRhYmxlfSBmcm9tIFwic3ZlbHRlL3N0b3JlXCI7XG5pbXBvcnQgdHlwZSB7V3JpdGFibGV9IGZyb20gXCJzdmVsdGUvc3RvcmVcIjtcblxuXG5leHBvcnQgdHlwZSBBbGVydFR5cGUgPSBcImluZm9cIiB8IFwid2FybmluZ1wiIHwgXCJlcnJvclwiIHwgXCJub25lXCJcblxuZXhwb3J0IGNvbnN0IGFsZXJ0cyA9IHdyaXRhYmxlPERpc3BhdGNoZWRBbGVydFtdPihbXSlcblxuZXhwb3J0IGZ1bmN0aW9uIHNlbmRBbGVydChvcHRpb25zOiBad2llQWxlcnRPcHRpb25zKTogRGlzcGF0Y2hlZEFsZXJ0IHtcblxuICAgIGNvbnN0IGFsZXJ0ID0gbmV3IERpc3BhdGNoZWRBbGVydChvcHRpb25zKVxuICAgIGFsZXJ0cy51cGRhdGUoKGFsZXJ0cykgPT4gW2FsZXJ0LCAuLi5hbGVydHNdKVxuICAgIHJldHVybiBhbGVydFxufVxuXG5cbmV4cG9ydCBjbGFzcyBEaXNwYXRjaGVkQWxlcnQge1xuXG4gICAgLy9UT0RPIGNhbGxiYWNrIGJ1dHRvbnNcbiAgICAvL1RPRE8gdGltZW91dFxuXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogWndpZUFsZXJ0T3B0aW9ucykge1xuICAgICAgICB0aGlzLnRleHQgPSB3cml0YWJsZTxzdHJpbmc+KG9wdGlvbnMudGV4dClcbiAgICAgICAgdGhpcy50eXBlID0gd3JpdGFibGU8QWxlcnRUeXBlPihvcHRpb25zLnR5cGUgPz8gXCJub25lXCIpXG4gICAgICAgIHRoaXMuY2xvc2VhYmxlID0gd3JpdGFibGU8Ym9vbGVhbj4ob3B0aW9ucy5zaG93Q2xvc2VCdXR0b24gPz8gdHJ1ZSlcbiAgICAgICAgdGhpcy5jbG9zZU9uQ2xpY2sgPSBvcHRpb25zLmNsb3NlT25DbGljayA/PyBmYWxzZVxuXG4gICAgICAgIHRoaXMub25BbGVydENsb3NlID0gb3B0aW9ucy5vbkNsb3NlXG4gICAgICAgIHRoaXMub25BbGVydENsaWNrID0gb3B0aW9ucy5vbkNsaWNrXG4gICAgfVxuXG4gICAgb25BbGVydENsb3NlPzogKGFsZXJ0OiBEaXNwYXRjaGVkQWxlcnQpID0+IHZvaWRcbiAgICBvbkFsZXJ0Q2xpY2s/OiAoYWxlcnQ6IERpc3BhdGNoZWRBbGVydCkgPT4gdm9pZFxuICAgIHB1YmxpYyB0ZXh0OiBXcml0YWJsZTxzdHJpbmc+XG4gICAgcHVibGljIHR5cGU6IFdyaXRhYmxlPEFsZXJ0VHlwZT5cbiAgICBwdWJsaWMgY2xvc2VhYmxlOiBXcml0YWJsZTxib29sZWFuPlxuICAgIGNsb3NlT25DbGljazogYm9vbGVhblxuXG4gICAgcHVibGljIGNsaWNrKCkge1xuICAgICAgICBpZiAodGhpcy5vbkFsZXJ0Q2xpY2spXG4gICAgICAgICAgICB0aGlzLm9uQWxlcnRDbGljayh0aGlzKVxuXG4gICAgICAgIGlmICh0aGlzLmNsb3NlT25DbGljaylcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKVxuICAgIH1cblxuICAgIHB1YmxpYyBjbG9zZSgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJjbG9zZVwiLCB0aGlzKVxuICAgICAgICBhbGVydHMudXBkYXRlKChhbGVydHMpID0+IGFsZXJ0cy5maWx0ZXIoKGFsZXJ0KSA9PiBhbGVydCAhPT0gdGhpcykpXG4gICAgICAgIGlmICh0aGlzLm9uQWxlcnRDbG9zZSlcbiAgICAgICAgICAgIHRoaXMub25BbGVydENsb3NlKHRoaXMpXG5cbiAgICB9XG5cblxufVxuXG5leHBvcnQgdHlwZSBad2llQWxlcnRPcHRpb25zID0ge1xuICAgIHR5cGU/OiBBbGVydFR5cGVcbiAgICB0ZXh0OiBzdHJpbmcsXG4gICAgc2hvd0Nsb3NlQnV0dG9uPzogYm9vbGVhblxuICAgIGNsb3NlT25DbGljaz86IGJvb2xlYW5cbiAgICB0aW1lb3V0PzogbnVtYmVyLFxuICAgIG9uQ2xpY2s/OiAoYWxlcnQ6IERpc3BhdGNoZWRBbGVydCkgPT4gdm9pZFxuICAgIG9uQ2xvc2U/OiAoYWxlcnQ6IERpc3BhdGNoZWRBbGVydCkgPT4gdm9pZFxufSIsImltcG9ydCB7ZGV2fSBmcm9tICckYXBwL2Vudmlyb25tZW50JztcblxuZXhwb3J0IHR5cGUgUGxhdGZvcm0gPSBcIndlYlwiIHwgXCJ0YXVyaVwiIC8vVE9ETyBzb21lIGFuZHJvaWQvaW9zIHN0dWZmXG5cblxuZnVuY3Rpb24gZ2V0UGxhdGZvcm0oKTogUGxhdGZvcm0ge1xuICAgIGlmICgnX19UQVVSSV9fJyBpbiB3aW5kb3cpIHtcbiAgICAgICAgcmV0dXJuIFwidGF1cmlcIlxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcIndlYlwiXG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IGRlYnVnID0gZGV2XG5leHBvcnQgY29uc3QgcGxhdGZvcm06IFBsYXRmb3JtID0gZ2V0UGxhdGZvcm0oKTsiLCJpbXBvcnQge3dyaXRhYmxlfSBmcm9tIFwic3ZlbHRlL3N0b3JlXCI7XG5pbXBvcnQgU3dhbCBmcm9tICdzd2VldGFsZXJ0MidcbmltcG9ydCB7c2VuZEFsZXJ0fSBmcm9tIFwiLi9hbGVydHMuanNcIjtcbmltcG9ydCB7ZGV2fSBmcm9tICckYXBwL2Vudmlyb25tZW50JztcbmltcG9ydCB7cGxhdGZvcm19IGZyb20gXCIuL3BsYXRmb3JtLmpzXCI7XG5cblxuLy9UT0RPIG9wdGltaXplIHRoaXNcblxubGV0IHJlZ2lzdHJhdGlvbjogU2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbjtcblxuZnVuY3Rpb24gaW5mb3JtX3VwZGF0ZV9hdmFpbGFibGUoKSB7XG4gICAgaWYgKHJlZ2lzdHJhdGlvbi5hY3RpdmUpXG4gICAgICAgIHNlbmRBbGVydCh7XG4gICAgICAgICAgICB0ZXh0OiBcIlVwZGF0ZSBpbnN0YWxsZWQgQ2xpY2sgaGVyZSB0byBSZXN0YXJ0XCIsXG4gICAgICAgICAgICB0eXBlOiBcImluZm9cIixcbiAgICAgICAgICAgIHNob3dDbG9zZUJ1dHRvbjogZmFsc2UsXG4gICAgICAgICAgICBvbkNsaWNrOiBhc3luYyAoYWxlcnQpID0+IHtcbiAgICAgICAgICAgICAgICBhbGVydC50ZXh0LnNldCgnSW5zdGFsbGluZyBQbGVhc2Ugd2FpdC4uLicpXG4gICAgICAgICAgICAgICAgYXdhaXQgYXBwbHlfdXBkYXRlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbn1cblxuYXN5bmMgZnVuY3Rpb24gYXBwbHlfdXBkYXRlKCkge1xuICAgIGF3YWl0IHJlZ2lzdHJhdGlvbi51cGRhdGUoKVxuICAgIGlmIChyZWdpc3RyYXRpb24uaW5zdGFsbGluZykge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlNXIHN0aWxsIGluc3RhbGxpbmcgd2FpdGluZyBmb3IgaXQgdG8gZmluaXNoXCIpXG4gICAgICAgIHJlZ2lzdHJhdGlvbi5pbnN0YWxsaW5nLmFkZEV2ZW50TGlzdGVuZXIoJ3N0YXRlY2hhbmdlJywgYXBwbHlfdXBkYXRlX3N0YWdlXzIpXG4gICAgfSBlbHNlXG4gICAgICAgIGF3YWl0IGFwcGx5X3VwZGF0ZV9zdGFnZV8yKClcbn1cblxuYXN5bmMgZnVuY3Rpb24gYXBwbHlfdXBkYXRlX3N0YWdlXzIoKSB7XG4gICAgY29uc29sZS5sb2coXCJTVyBpbnN0YWxsZWQgYXBwbHkgdXBkYXRlIHRvIEFwcGxpY2F0aW9uXCIpXG4gICAgaWYgKHJlZ2lzdHJhdGlvbi53YWl0aW5nKVxuICAgICAgICByZWdpc3RyYXRpb24ud2FpdGluZy5wb3N0TWVzc2FnZSgnQVBQTFlfVVBEQVRFJylcbiAgICBlbHNlXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0KCkge1xuXG4gICAgaWYgKHBsYXRmb3JtID09PSBcInRhdXJpXCIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJTZXJ2aWNlIFdvcmtlciBza2lwcGVkISAoVGF1cmkpXCIpXG4gICAgICAgIHJldHVyblxuICAgIH0gZWxzZSBpZiAoZGV2KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiU2VydmljZSBXb3JrZXIgc2tpcHBlZCEgKGRldiBtb2RlKVwiKVxuICAgICAgICByZXR1cm5cbiAgICB9XG5cblxuICAgIGlmICgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7XG4gICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRyb2xsZXJjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNvbnRyb2xsZXJjaGFuZ2UgZXZlbnQgLT4gcmVsb2FkaW5nXCIpXG4gICAgICAgICAgICBTd2FsLmZpcmUoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnUmVzdGFydGluZycsXG4gICAgICAgICAgICAgICAgdGV4dDogJ1BsZWFzZSBXYWl0J1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIFN3YWwuc2hvd0xvYWRpbmcobnVsbClcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxuICAgICAgICB9KVxuICAgICAgICBjb25zdCBjX3JlZ2lzdHJhdGlvbiA9IGF3YWl0IG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKFwiL3NlcnZpY2Utd29ya2VyLmpzXCIpXG4gICAgICAgIGlmIChjX3JlZ2lzdHJhdGlvbikge1xuICAgICAgICAgICAgcmVnaXN0cmF0aW9uID0gY19yZWdpc3RyYXRpb247XG5cbiAgICAgICAgICAgIGlmIChyZWdpc3RyYXRpb24ud2FpdGluZyB8fCByZWdpc3RyYXRpb24uaW5zdGFsbGluZylcbiAgICAgICAgICAgICAgICBpbmZvcm1fdXBkYXRlX2F2YWlsYWJsZSgpXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmVnaXN0cmF0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ3VwZGF0ZWZvdW5kJywgaW5mb3JtX3VwZGF0ZV9hdmFpbGFibGUpXG4gICAgICAgICAgICAvL2xvb2sgZm9yIHVwZGF0ZXMgZXZlcnkgNjAgbWludXRlc1xuICAgICAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4gY19yZWdpc3RyYXRpb24udXBkYXRlKCksIDEwMDAgKiA2MCAqIDYwKVxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJTZXJ2aWNlIFdvcmtlciBub3Qgc3VwcG9ydGVkIGJ5IGJyb3dzZXJcIilcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBpbnN0YWxsUHJvbXQgPSB3cml0YWJsZTxFdmVudCB8IG51bGw+KClcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZWluc3RhbGxwcm9tcHQnLCAoZXZlbnQpID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGluc3RhbGxQcm9tdC5zZXQoZXZlbnQpXG59KSJdLCJuYW1lcyI6WyJhbGVydHMiLCJ3cml0YWJsZSIsInNlbmRBbGVydCIsIm9wdGlvbnMiLCJhbGVydCIsIkRpc3BhdGNoZWRBbGVydCIsIl9fcHVibGljRmllbGQiLCJnZXRQbGF0Zm9ybSIsInBsYXRmb3JtIiwicmVnaXN0cmF0aW9uIiwiaW5mb3JtX3VwZGF0ZV9hdmFpbGFibGUiLCJhcHBseV91cGRhdGUiLCJhcHBseV91cGRhdGVfc3RhZ2VfMiIsImluaXQiLCJTd2FsIiwiY19yZWdpc3RyYXRpb24iLCJpbnN0YWxsUHJvbXQiLCJldmVudCJdLCJtYXBwaW5ncyI6ImtRQU1hLE1BQUFBLEVBQVNDLEVBQTRCLEVBQUUsRUFFN0MsU0FBU0MsRUFBVUMsRUFBNEMsQ0FFNUQsTUFBQUMsRUFBUSxJQUFJQyxFQUFnQkYsQ0FBTyxFQUN6QyxPQUFBSCxFQUFPLE9BQVFBLEdBQVcsQ0FBQ0ksRUFB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
